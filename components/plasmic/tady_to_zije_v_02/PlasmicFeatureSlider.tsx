// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7YxWRrh3dN23tQ7PqjX2hp
// Component: ztikhjgYujI4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: MFeYqTwC_Y94/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7YxWRrh3dN23tQ7PqjX2hp/projectcss
import sty from "./PlasmicFeatureSlider.module.css"; // plasmic-import: ztikhjgYujI4/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: CDVnbLzkg1-7/icon

createPlasmicElementProxy;

export type PlasmicFeatureSlider__VariantMembers = {};
export type PlasmicFeatureSlider__VariantsArgs = {};
type VariantPropType = keyof PlasmicFeatureSlider__VariantsArgs;
export const PlasmicFeatureSlider__VariantProps = new Array<VariantPropType>();

export type PlasmicFeatureSlider__ArgsType = {};
type ArgPropType = keyof PlasmicFeatureSlider__ArgsType;
export const PlasmicFeatureSlider__ArgProps = new Array<ArgPropType>();

export type PlasmicFeatureSlider__OverridesType = {
  root?: Flex__<"section">;
  sideEffect?: Flex__<typeof SideEffect>;
  timer?: Flex__<typeof Timer>;
  images?: Flex__<"div">;
  arrows?: Flex__<"div">;
  content?: Flex__<"div">;
  h3?: Flex__<"h3">;
  h4?: Flex__<"h4">;
  button?: Flex__<typeof Button>;
};

export interface DefaultFeatureSliderProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFeatureSlider__RenderFunc(props: {
  variants: PlasmicFeatureSlider__VariantsArgs;
  args: PlasmicFeatureSlider__ArgsType;
  overrides: PlasmicFeatureSlider__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "ticker",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "nextIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.index;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "index",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "tempImages",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                "https://rnrfdxtsdvmxhjsoqoid.supabase.co/storage/v1/object/public/assets/featureImages/1725444273709000_0.jpg",
                "https://rnrfdxtsdvmxhjsoqoid.supabase.co/storage/v1/object/public/assets/featureImages/1725444273710000_1.jpg",
                "https://rnrfdxtsdvmxhjsoqoid.supabase.co/storage/v1/object/public/assets/featureImages/1725444273711000_2.jpg",
                "https://rnrfdxtsdvmxhjsoqoid.supabase.co/storage/v1/object/public/assets/featureImages/1725444273711000_3.jpg",
                "https://rnrfdxtsdvmxhjsoqoid.supabase.co/storage/v1/object/public/assets/featureImages/1725444273711000_4.jpg"
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      return fetch(
                        "https://rnrfdxtsdvmxhjsoqoid.supabase.co/rest/v1/events?limit=5",
                        {
                          method: "GET",
                          headers: {
                            "Content-Type": "application/json",
                            apikey:
                              "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJucmZkeHRzZHZteGhqc29xb2lkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjE4MjQyNTcsImV4cCI6MjAzNzQwMDI1N30.N-1_fY2KLrl9sxmeM8z3bRc-b0ksQ0C4IWQpugCs65I"
                          }
                        }
                      )
                        .then(response => response.json())
                        .then(data => ($state.data = data))
                        .catch(error =>
                          console.error("Error fetching data:", error)
                        );
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }

          $steps["updateData"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["data"]
                  },
                  operation: 0,
                  value: $steps.runCode
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateData"] != null &&
            typeof $steps["updateData"] === "object" &&
            typeof $steps["updateData"].then === "function"
          ) {
            $steps["updateData"] = await $steps["updateData"];
          }
        }}
      />

      <Timer
        data-plasmic-name={"timer"}
        data-plasmic-override={overrides.timer}
        className={classNames("__wab_instance", sty.timer)}
        intervalSeconds={5}
        isRunning={(() => {
          try {
            return $state.ticker;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()}
        onTick={async () => {
          const $steps = {};

          $steps["updateNextIndex"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["nextIndex"]
                  },
                  operation: 0,
                  value: ($state.nextIndex =
                    $state.nextIndex < $state.data.length - 1
                      ? $state.nextIndex + 1
                      : 0)
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateNextIndex"] != null &&
            typeof $steps["updateNextIndex"] === "object" &&
            typeof $steps["updateNextIndex"].then === "function"
          ) {
            $steps["updateNextIndex"] = await $steps["updateNextIndex"];
          }

          $steps["updateData2"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return setTimeout(() => {
                      $state.index = $state.nextIndex;
                    }, 300);
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateData2"] != null &&
            typeof $steps["updateData2"] === "object" &&
            typeof $steps["updateData2"].then === "function"
          ) {
            $steps["updateData2"] = await $steps["updateData2"];
          }
        }}
        runWhileEditing={true}
      />

      <div
        data-plasmic-name={"images"}
        data-plasmic-override={overrides.images}
        className={classNames(projectcss.all, sty.images)}
      >
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__tQt2)}
          displayHeight={"100%"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          height={"100%"}
          loading={"eager"}
          src={(() => {
            try {
              return $state.tempImages[$state.index];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          width={"100%"}
        />

        <PlasmicImg__
          alt={(() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          className={classNames(sty.img__z3GzG)}
          displayHeight={"100%"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          height={"100%"}
          id={"newImage"}
          loading={"eager"}
          src={(() => {
            try {
              return $state.tempImages[$state.nextIndex];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          style={(() => {
            try {
              return {
                visibility:
                  $state.nextIndex !== $state.index ? "visible" : "hidden",
                opacity: $state.nextIndex !== $state.index ? "100%" : "0%",
                transition: "opacity 0.3s"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          width={"100%"}
        />
      </div>
      <div
        data-plasmic-name={"arrows"}
        data-plasmic-override={overrides.arrows}
        className={classNames(projectcss.all, sty.arrows)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__jdrpk)}>
          <Icon3Icon
            className={classNames(projectcss.all, sty.svg__mykPi)}
            onClick={async event => {
              const $steps = {};

              $steps["updateTicker"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["ticker"]
                      },
                      operation: 4
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTicker"] != null &&
                typeof $steps["updateTicker"] === "object" &&
                typeof $steps["updateTicker"].then === "function"
              ) {
                $steps["updateTicker"] = await $steps["updateTicker"];
              }

              $steps["updateNextIndex"] =
                $state.nextIndex === $state.index
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["nextIndex"]
                        },
                        operation: 0,
                        value: ($state.nextIndex =
                          $state.nextIndex > 0
                            ? $state.nextIndex - 1
                            : $state.data.length - 1)
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateNextIndex"] != null &&
                typeof $steps["updateNextIndex"] === "object" &&
                typeof $steps["updateNextIndex"].then === "function"
              ) {
                $steps["updateNextIndex"] = await $steps["updateNextIndex"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return setTimeout(() => {
                          $state.index = $state.nextIndex;
                        }, 300);
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateTicker2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["ticker"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTicker2"] != null &&
                typeof $steps["updateTicker2"] === "object" &&
                typeof $steps["updateTicker2"].then === "function"
              ) {
                $steps["updateTicker2"] = await $steps["updateTicker2"];
              }
            }}
            role={"img"}
          />

          <div
            data-plasmic-name={"content"}
            data-plasmic-override={overrides.content}
            className={classNames(projectcss.all, sty.content)}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__jraSb)}
              style={(() => {
                try {
                  return {
                    visibility:
                      $state.nextIndex === $state.index ? "visible" : "hidden", // Visible only when equal
                    opacity: $state.nextIndex === $state.index ? "100%" : "0%", // Fade in when equal, else hidden
                    transition:
                      $state.nextIndex === $state.index
                        ? "opacity 0.3s"
                        : "none" // Apply transition only when equal
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <h3
                data-plasmic-name={"h3"}
                data-plasmic-override={overrides.h3}
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.data[$state.index].name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "You won't believe what happens next.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </h3>
              <h4
                data-plasmic-name={"h4"}
                data-plasmic-override={overrides.h4}
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.h4
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return "(" + $state.data[$state.index].provider + ")";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "You won't believe what happens next.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </h4>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pHoop
                )}
                style={(() => {
                  try {
                    return {
                      display: "-webkit-box", // Enables the box model for clamping
                      "-webkit-box-orient": "vertical", // Sets the box orientation to vertical
                      "-webkit-line-clamp": 6, // Limits the text to a maximum of six lines
                      overflow: "hidden", // Hides overflowed text
                      lineHeight: "3vh", // Adjusts line height to 1.5
                      fontSize: "1.5vh", // Sets font size to 1.5vh
                      textOverflow: "ellipsis", // Adds ellipsis for truncated text
                      maxHeight: "calc(1.5vh * 6)" // Sets max height to accommodate 6 lines (1.5em is typical for line height)
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.data[$state.index].description;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__vnGjc)}
                style={(() => {
                  try {
                    return {
                      gap: "2vw"
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  endIcon={null}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToEvent"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: `/${(() => {
                              try {
                                return JSON.parse(
                                  localStorage.getItem("queryCache")
                                ).category.find(
                                  item =>
                                    item.name ===
                                    $state.data[$state.index].category
                                ).webURL;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}/${(() => {
                              try {
                                return $state.data[$state.index].webUrl;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}`
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToEvent"] != null &&
                      typeof $steps["goToEvent"] === "object" &&
                      typeof $steps["goToEvent"].then === "function"
                    ) {
                      $steps["goToEvent"] = await $steps["goToEvent"];
                    }
                  }}
                  startIcon={null}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r4RkR
                    )}
                  >
                    {"Chvi v\u011bd\u011bt v\u00edc"}
                  </div>
                </Button>
                <div className={classNames(projectcss.all, sty.freeBox__aBwyi)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tbrCj
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.data[$state.index].price
                            ? $state.data[$state.index].price + " Kč"
                            : "Zdarma";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Zdarma";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <Icon3Icon
            className={classNames(projectcss.all, sty.svg___6ARln)}
            onClick={async event => {
              const $steps = {};

              $steps["updateTicker"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["ticker"]
                      },
                      operation: 4
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTicker"] != null &&
                typeof $steps["updateTicker"] === "object" &&
                typeof $steps["updateTicker"].then === "function"
              ) {
                $steps["updateTicker"] = await $steps["updateTicker"];
              }

              $steps["updateNextIndex"] =
                $state.nextIndex === $state.index
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["nextIndex"]
                        },
                        operation: 0,
                        value: ($state.nextIndex =
                          $state.nextIndex < $state.data.length - 1
                            ? $state.nextIndex + 1
                            : 0)
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateNextIndex"] != null &&
                typeof $steps["updateNextIndex"] === "object" &&
                typeof $steps["updateNextIndex"].then === "function"
              ) {
                $steps["updateNextIndex"] = await $steps["updateNextIndex"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return setTimeout(() => {
                          $state.index = $state.nextIndex;
                        }, 300);
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateTicker2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["ticker"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTicker2"] != null &&
                typeof $steps["updateTicker2"] === "object" &&
                typeof $steps["updateTicker2"].then === "function"
              ) {
                $steps["updateTicker2"] = await $steps["updateTicker2"];
              }
            }}
            role={"img"}
          />
        </div>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "timer",
    "images",
    "arrows",
    "content",
    "h3",
    "h4",
    "button"
  ],
  sideEffect: ["sideEffect"],
  timer: ["timer"],
  images: ["images"],
  arrows: ["arrows", "content", "h3", "h4", "button"],
  content: ["content", "h3", "h4", "button"],
  h3: ["h3"],
  h4: ["h4"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  sideEffect: typeof SideEffect;
  timer: typeof Timer;
  images: "div";
  arrows: "div";
  content: "div";
  h3: "h3";
  h4: "h4";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFeatureSlider__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFeatureSlider__VariantsArgs;
    args?: PlasmicFeatureSlider__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFeatureSlider__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFeatureSlider__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFeatureSlider__ArgProps,
          internalVariantPropNames: PlasmicFeatureSlider__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFeatureSlider__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeatureSlider";
  } else {
    func.displayName = `PlasmicFeatureSlider.${nodeName}`;
  }
  return func;
}

export const PlasmicFeatureSlider = Object.assign(
  // Top-level PlasmicFeatureSlider renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    timer: makeNodeComponent("timer"),
    images: makeNodeComponent("images"),
    arrows: makeNodeComponent("arrows"),
    content: makeNodeComponent("content"),
    h3: makeNodeComponent("h3"),
    h4: makeNodeComponent("h4"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicFeatureSlider
    internalVariantProps: PlasmicFeatureSlider__VariantProps,
    internalArgProps: PlasmicFeatureSlider__ArgProps
  }
);

export default PlasmicFeatureSlider;
/* prettier-ignore-end */
