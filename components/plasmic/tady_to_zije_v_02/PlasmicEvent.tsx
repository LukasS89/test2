// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7YxWRrh3dN23tQ7PqjX2hp
// Component: ktO4GHy5gyrv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: uZX7p1wyVbCa/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import CategoryMenu from "../../CategoryMenu"; // plasmic-import: nREGSf5d9U6b/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { PlasmicHead } from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7YxWRrh3dN23tQ7PqjX2hp/projectcss
import sty from "./PlasmicEvent.module.css"; // plasmic-import: ktO4GHy5gyrv/css

createPlasmicElementProxy;

export type PlasmicEvent__VariantMembers = {};
export type PlasmicEvent__VariantsArgs = {};
type VariantPropType = keyof PlasmicEvent__VariantsArgs;
export const PlasmicEvent__VariantProps = new Array<VariantPropType>();

export type PlasmicEvent__ArgsType = {};
type ArgPropType = keyof PlasmicEvent__ArgsType;
export const PlasmicEvent__ArgProps = new Array<ArgPropType>();

export type PlasmicEvent__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  dataFetcher?: Flex__<typeof Fetcher>;
  categoryMenu?: Flex__<typeof CategoryMenu>;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
  h1?: Flex__<"h1">;
  h5?: Flex__<"h5">;
};

export interface DefaultEventProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEvent__RenderFunc(props: {
  variants: PlasmicEvent__VariantsArgs;
  args: PlasmicEvent__ArgsType;
  overrides: PlasmicEvent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "categoryMenu.selectedItem",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "eventItem",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            const categoryUrl = $ctx.params.categoryUrl;
            const result = JSON.parse(
              localStorage.getItem("queryCache")
            )?.events?.[categoryUrl]?.find(
              item => item.webUrl === $ctx.params.eventUrl
            );
            return result;
          })()
      },
      {
        path: "categoryMenu.selectedSubcategory",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__bhquu)}>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <Fetcher
              data-plasmic-name={"dataFetcher"}
              data-plasmic-override={overrides.dataFetcher}
              className={classNames("__wab_instance", sty.dataFetcher)}
              dataOp={{
                sourceId: "f8Ug9pq9YCTH5iNERcsX8T",
                opId: "40d2321c-37cb-4e66-945d-d6aaf476914f",
                userArgs: {
                  filters: [$ctx.params.category]
                },
                cacheKey: `plasmic.$.f96AYbHvyMEG.$.40d2321c-37cb-4e66-945d-d6aaf476914f.$.`,
                invalidatedKeys: null,
                roleId: null
              }}
              name={"categoryData"}
              queries={{}}
            >
              {($queries: any) => (
                <section
                  className={classNames(projectcss.all, sty.section__rOJx)}
                >
                  <CategoryMenu
                    data-plasmic-name={"categoryMenu"}
                    data-plasmic-override={overrides.categoryMenu}
                    className={classNames("__wab_instance", sty.categoryMenu)}
                    onSelectedItemChange={generateStateOnChangeProp($state, [
                      "categoryMenu",
                      "selectedItem"
                    ])}
                    onSelectedSubcategoryChange={generateStateOnChangeProp(
                      $state,
                      ["categoryMenu", "selectedSubcategory"]
                    )}
                    selectedSubcategory={generateStateValueProp($state, [
                      "categoryMenu",
                      "selectedSubcategory"
                    ])}
                    url={(() => {
                      try {
                        return $ctx.params.category;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />

                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__jLfFv
                    )}
                    code={
                      "<style>\r\n    #fadeInStack {\r\n      opacity: 0;\r\n      animation: fadeIn 200ms ease-in-out 100ms forwards; /* 300ms duration with 100ms delay */\r\n    }\r\n\r\n    @keyframes fadeIn {\r\n      to { opacity: 1; }\r\n    }\r\n  </style>"
                    }
                  />

                  <DataFetcher
                    data-plasmic-name={"httpRestApiFetcher"}
                    data-plasmic-override={overrides.httpRestApiFetcher}
                    className={classNames(
                      "__wab_instance",
                      sty.httpRestApiFetcher
                    )}
                    dataName={"activityData"}
                    errorDisplay={
                      <DataCtxReader__>
                        {$ctx => "Error fetching data"}
                      </DataCtxReader__>
                    }
                    errorName={"activityError"}
                    headers={{
                      "Content-Type": "application/json",
                      apikey:
                        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJucmZkeHRzZHZteGhqc29xb2lkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjE4MjQyNTcsImV4cCI6MjAzNzQwMDI1N30.N-1_fY2KLrl9sxmeM8z3bRc-b0ksQ0C4IWQpugCs65I"
                    }}
                    loadingDisplay={
                      <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
                    }
                    method={"GET"}
                    noLayout={false}
                    url={(() => {
                      try {
                        return (() => {
                          return (
                            "https://rnrfdxtsdvmxhjsoqoid.supabase.co/rest/v1/events?webUrl=eq." +
                            $ctx.params.event
                          );
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "https://api.github.com/users/plasmicapp/repos";
                        }
                        throw e;
                      }
                    })()}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <React.Fragment>
                          <PlasmicHead
                            data-plasmic-name={"pageMetadataOverride"}
                            data-plasmic-override={
                              overrides.pageMetadataOverride
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.pageMetadataOverride
                            )}
                            description={(() => {
                              try {
                                return $ctx.activityData[0].description;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            image={(() => {
                              try {
                                return $ctx.activityData[0].gallery[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            title={(() => {
                              try {
                                return $ctx.activityData[0].name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__f2Wh
                            )}
                            id={"fadeInStack"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cxnk
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["goToCategory"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        destination: `/${(() => {
                                          try {
                                            return $ctx.params.category;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}`
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["goToCategory"] != null &&
                                  typeof $steps["goToCategory"] === "object" &&
                                  typeof $steps["goToCategory"].then ===
                                    "function"
                                ) {
                                  $steps["goToCategory"] = await $steps[
                                    "goToCategory"
                                  ];
                                }
                              }}
                              style={(() => {
                                try {
                                  return {
                                    gap: "0.75vw"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <PlasmicLink__
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link__fn3
                                )}
                                component={Link}
                                href={`/${(() => {
                                  try {
                                    return $queries.categoryData.data[0].webURL;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}`}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps[
                                    "updateCategoryMenuSelectedSubcategory"
                                  ] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "categoryMenu",
                                              "selectedSubcategory"
                                            ]
                                          },
                                          operation: 1
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            undefined
                                          );
                                          return undefined;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps[
                                      "updateCategoryMenuSelectedSubcategory"
                                    ] != null &&
                                    typeof $steps[
                                      "updateCategoryMenuSelectedSubcategory"
                                    ] === "object" &&
                                    typeof $steps[
                                      "updateCategoryMenuSelectedSubcategory"
                                    ].then === "function"
                                  ) {
                                    $steps[
                                      "updateCategoryMenuSelectedSubcategory"
                                    ] = await $steps[
                                      "updateCategoryMenuSelectedSubcategory"
                                    ];
                                  }
                                }}
                                platform={"nextjs"}
                                style={(() => {
                                  try {
                                    return (() => {
                                      return (function () {
                                        const queryCache = JSON.parse(
                                          localStorage.getItem("queryCache")
                                        );
                                        if (queryCache && queryCache.category) {
                                          const matchedItem =
                                            queryCache.category.find(
                                              item =>
                                                item.webURL ===
                                                $ctx.params.category
                                            );
                                          if (
                                            matchedItem &&
                                            matchedItem.selectedSubCategory
                                          ) {
                                            return { opacity: 0.45 };
                                          }
                                        }
                                        return { opacity: 0.8 };
                                      })();
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3___31Xe2
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return `< `;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Sport a voln\u00fd \u010das";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h3>
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__mft1X
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries.categoryData.data[0]
                                          .name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Sport a voln\u00fd \u010das";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h3>
                              </PlasmicLink__>
                              <PlasmicLink__
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link__awxSy
                                )}
                                component={Link}
                                href={`/${(() => {
                                  try {
                                    return $state.categoryMenu.selectedItem
                                      .webURL;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}`}
                                platform={"nextjs"}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__znmP1
                                  )}
                                >
                                  <React.Fragment>{"< "}</React.Fragment>
                                </h3>
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__rh3Oc
                                  )}
                                >
                                  <React.Fragment>
                                    {
                                      $state.categoryMenu.selectedSubcategory
                                        .name
                                    }
                                  </React.Fragment>
                                </h3>
                              </PlasmicLink__>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yDcWf
                              )}
                            >
                              <h1
                                data-plasmic-name={"h1"}
                                data-plasmic-override={overrides.h1}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h1,
                                  projectcss.__wab_text,
                                  sty.h1
                                )}
                              >
                                <React.Fragment>
                                  {$ctx.activityData[0].name}
                                </React.Fragment>
                              </h1>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__nm5Ui
                                )}
                                style={(() => {
                                  try {
                                    return {
                                      backgroundColor:
                                        $ctx.activityData[0].price &&
                                        $ctx.activityData[0].price > 0
                                          ? $queries.categoryData.data[0].color
                                          : "rgba(255, 255, 255, 0.5)",
                                      border:
                                        $ctx.activityData[0].price &&
                                        $ctx.activityData[0].price > 0
                                          ? "none"
                                          : `1px solid ${$state.color}`
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <h5
                                  data-plasmic-name={"h5"}
                                  data-plasmic-override={overrides.h5}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5
                                  )}
                                  style={(() => {
                                    try {
                                      return {
                                        color:
                                          $ctx.activityData[0].price &&
                                          $ctx.activityData[0].price > 0
                                            ? "white"
                                            : $queries.categoryData.data[0]
                                                .color
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      let priceText;
                                      if (
                                        $ctx.activityData[0].price &&
                                        $ctx.activityData[0].price > 0
                                      ) {
                                        return (priceText = `${Math.floor(
                                          $ctx.activityData[0].price
                                        ).toLocaleString("cs-CZ")} Kč`);
                                      } else {
                                        return (priceText = "Zdarma");
                                      }
                                    })()}
                                  </React.Fragment>
                                </h5>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__hPlSc
                              )}
                              style={(() => {
                                try {
                                  return {
                                    gap: "3vh"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__g2CRq)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"none"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"100%"}
                                height={"100%"}
                                loading={"eager"}
                                width={"50%"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__jvuI
                                )}
                                style={(() => {
                                  try {
                                    return {
                                      gap: "3vh"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__f1Qbh
                                  )}
                                  style={(() => {
                                    try {
                                      return {
                                        gap: "3vh"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__myHea)}
                                    displayHeight={"100%"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"none"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"100%"}
                                    height={"100%"}
                                    loading={"eager"}
                                    width={"100%"}
                                  />

                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img___7XWl6)}
                                    displayHeight={"100%"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"none"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"100%"}
                                    height={"100%"}
                                    loading={"eager"}
                                    width={"100%"}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__inkj1
                                  )}
                                  style={(() => {
                                    try {
                                      return {
                                        gap: "3vh"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__xu8Ep)}
                                    displayHeight={"100%"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"none"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"100%"}
                                    height={"100%"}
                                    loading={"eager"}
                                    width={"100%"}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__hvRbn
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__v6YNj)}
                                      displayHeight={"100%"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"none"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"100%"}
                                      height={"100%"}
                                      loading={"eager"}
                                      width={"100%"}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__z5BlO
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__qJHd9
                                        )}
                                        style={(() => {
                                          try {
                                            return {
                                              display: "flex",
                                              justifyContent: "center",
                                              alignItems: "center",
                                              height: "100%", // Adjust this to the height of your container if needed
                                              width: "100%" // Adjust this to the width of your container if needed
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      >
                                        {"Zobrazit dal\u0161\u00ed fotky"}
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ssUjm
                              )}
                              style={(() => {
                                try {
                                  return {
                                    gap: "3vh"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__jrUjf
                                )}
                                style={(() => {
                                  try {
                                    return {
                                      gap: "2vh"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ceNnq
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__tq9Dn
                                    )}
                                  >
                                    {false ? (
                                      <Embed
                                        className={classNames(
                                          "__wab_instance",
                                          sty.embedHtml___0Pk3M
                                        )}
                                        code={
                                          "<!-- Google Font Stylesheet -->\r\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&display=swap\" />\r\n\r\n<!-- CSS for Material Symbols Icon Settings with Centering -->\r\n<style>\r\n  .icon-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: auto; /* Adjusts width based on content */\r\n    height: auto; /* Adjusts height based on content */\r\n  }\r\n  .material-symbols-outlined {\r\n    font-family: 'Material Symbols Outlined';\r\n    font-variation-settings:\r\n      'FILL' 0,\r\n      'wght' 400,\r\n      'GRAD' 0,\r\n      'opsz' 24;\r\n    font-size: 48px; /* Responsive size based on viewport height */\r\n\r\n  }\r\n</style>\r\n\r\n<!-- Icon Element inside Centering Container -->\r\n<div class=\"icon-container\">\r\n  <span class=\"material-symbols-outlined\">\r\n    timelapse <!-- Replace with desired icon name -->\r\n  </span>\r\n</div>\r\n"
                                        }
                                      />
                                    ) : null}
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__a5JQ7
                                      )}
                                      style={(() => {
                                        try {
                                          return {
                                            gap: "0.5vh"
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__u9MyW
                                        )}
                                      >
                                        {"Doba trv\u00e1n\u00ed"}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__lKfNq
                                        )}
                                      >
                                        {""}
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__t3Owc
                                    )}
                                  >
                                    {false ? (
                                      <Embed
                                        className={classNames(
                                          "__wab_instance",
                                          sty.embedHtml__vcSez
                                        )}
                                        code={
                                          "<!-- Google Font Stylesheet -->\r\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&display=swap\" />\r\n\r\n<!-- CSS for Material Symbols Icon Settings with Centering -->\r\n<style>\r\n  .icon-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: auto; /* Adjusts width based on content */\r\n    height: auto; /* Adjusts height based on content */\r\n  }\r\n  .material-symbols-outlined {\r\n    font-family: 'Material Symbols Outlined';\r\n    font-variation-settings:\r\n      'FILL' 0,\r\n      'wght' 400,\r\n      'GRAD' 0,\r\n      'opsz' 24;\r\n    font-size: 3vh; /* Responsive size based on viewport height */\r\n    line-height: 1; /* Ensure icon height matches font size closely */\r\n  }\r\n</style>\r\n\r\n<!-- Icon Element inside Centering Container -->\r\n<div class=\"icon-container\">\r\n  <span class=\"material-symbols-outlined\">\r\n    schedule <!-- Replace with desired icon name -->\r\n  </span>\r\n</div>\r\n"
                                        }
                                      />
                                    ) : null}
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___81HCo
                                      )}
                                      style={(() => {
                                        try {
                                          return {
                                            gap: "0.5vh"
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__pf7Pk
                                        )}
                                      >
                                        {"Za\u010d\u00edn\u00e1"}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___0Zq22
                                        )}
                                      >
                                        {""}
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__siiSk
                                    )}
                                  >
                                    {false ? (
                                      <Embed
                                        className={classNames(
                                          "__wab_instance",
                                          sty.embedHtml___42VIr
                                        )}
                                        code={
                                          "<!-- Google Font Stylesheet -->\r\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&display=swap\" />\r\n\r\n<!-- CSS for Material Symbols Icon Settings with Centering -->\r\n<style>\r\n  .icon-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: auto; /* Adjusts width based on content */\r\n    height: auto; /* Adjusts height based on content */\r\n  }\r\n  .material-symbols-outlined {\r\n    font-family: 'Material Symbols Outlined';\r\n    font-variation-settings:\r\n      'FILL' 0,\r\n      'wght' 400,\r\n      'GRAD' 0,\r\n      'opsz' 24;\r\n    font-size: 3vh; /* Responsive size based on viewport height */\r\n    line-height: 1; /* Ensure icon height matches font size closely */\r\n  }\r\n</style>\r\n\r\n<!-- Icon Element inside Centering Container -->\r\n<div class=\"icon-container\">\r\n  <span class=\"material-symbols-outlined\">\r\n    calendar_month <!-- Replace with desired icon name -->\r\n  </span>\r\n</div>\r\n"
                                        }
                                      />
                                    ) : null}
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__mjo20
                                      )}
                                      style={(() => {
                                        try {
                                          return {
                                            gap: "0.5vh"
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___4Hmo3
                                        )}
                                      >
                                        {"Datum"}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__zU6BI
                                        )}
                                      >
                                        {""}
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__zKqKy
                                    )}
                                  >
                                    {false ? (
                                      <Embed
                                        className={classNames(
                                          "__wab_instance",
                                          sty.embedHtml__soj9Q
                                        )}
                                        code={
                                          "<!-- Google Font Stylesheet -->\r\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&display=swap\" />\r\n\r\n<!-- CSS for Material Symbols Icon Settings with Centering -->\r\n<style>\r\n  .icon-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: auto; /* Adjusts width based on content */\r\n    height: auto; /* Adjusts height based on content */\r\n  }\r\n  .material-symbols-outlined {\r\n    font-family: 'Material Symbols Outlined';\r\n    font-variation-settings:\r\n      'FILL' 0,\r\n      'wght' 400,\r\n      'GRAD' 0,\r\n      'opsz' 24;\r\n    font-size: 3vh; /* Responsive size based on viewport height */\r\n    line-height: 1; /* Ensure icon height matches font size closely */\r\n  }\r\n</style>\r\n\r\n<!-- Icon Element inside Centering Container -->\r\n<div class=\"icon-container\">\r\n  <span class=\"material-symbols-outlined\">\r\n    schedule <!-- Replace with desired icon name -->\r\n  </span>\r\n</div>\r\n"
                                        }
                                      />
                                    ) : null}
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___0CBtC
                                      )}
                                      style={(() => {
                                        try {
                                          return {
                                            gap: "0.5vh"
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__apggn
                                        )}
                                      >
                                        {"Kapacita"}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__ywCi
                                        )}
                                      >
                                        {""}
                                      </div>
                                    </div>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__kl0G5
                                  )}
                                  style={(() => {
                                    try {
                                      return {
                                        gap: "1.5vh"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__dk3El
                                    )}
                                  >
                                    {"Popis ud\u00e1losti"}
                                  </h4>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__icwwo
                                    )}
                                  >
                                    {""}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__yMqWg
                                  )}
                                >
                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__c8Sq0
                                    )}
                                  >
                                    {
                                      "Aktivitu / Ud\u00e1lost zaji\u0161\u0165uje:  "
                                    }
                                  </h4>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__h8MNj
                                    )}
                                  >
                                    {""}
                                  </div>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__y3Jmw
                                )}
                              />
                            </div>
                          </div>
                        </React.Fragment>
                      )}
                    </DataCtxReader__>
                  </DataFetcher>
                </section>
              )}
            </Fetcher>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "dataFetcher",
    "categoryMenu",
    "httpRestApiFetcher",
    "pageMetadataOverride",
    "h1",
    "h5"
  ],
  header: ["header"],
  dataFetcher: [
    "dataFetcher",
    "categoryMenu",
    "httpRestApiFetcher",
    "pageMetadataOverride",
    "h1",
    "h5"
  ],
  categoryMenu: ["categoryMenu"],
  httpRestApiFetcher: [
    "httpRestApiFetcher",
    "pageMetadataOverride",
    "h1",
    "h5"
  ],
  pageMetadataOverride: ["pageMetadataOverride"],
  h1: ["h1"],
  h5: ["h5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  dataFetcher: typeof Fetcher;
  categoryMenu: typeof CategoryMenu;
  httpRestApiFetcher: typeof DataFetcher;
  pageMetadataOverride: typeof PlasmicHead;
  h1: "h1";
  h5: "h5";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEvent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEvent__VariantsArgs;
    args?: PlasmicEvent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEvent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEvent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEvent__ArgProps,
          internalVariantPropNames: PlasmicEvent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEvent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEvent";
  } else {
    func.displayName = `PlasmicEvent.${nodeName}`;
  }
  return func;
}

export const PlasmicEvent = Object.assign(
  // Top-level PlasmicEvent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    dataFetcher: makeNodeComponent("dataFetcher"),
    categoryMenu: makeNodeComponent("categoryMenu"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    h1: makeNodeComponent("h1"),
    h5: makeNodeComponent("h5"),

    // Metadata about props expected for PlasmicEvent
    internalVariantProps: PlasmicEvent__VariantProps,
    internalArgProps: PlasmicEvent__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEvent;
/* prettier-ignore-end */
