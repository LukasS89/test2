// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7YxWRrh3dN23tQ7PqjX2hp
// Component: 2yhM4hehNDCv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Header from "../../Header"; // plasmic-import: uZX7p1wyVbCa/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { UploadImages } from "@components/UploadImages"; // plasmic-import: 8eIqd6WAgMjU/codeComponent
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInputWhite from "../../TextInputWhite"; // plasmic-import: BkB9iEume48d/component
import { CustomDatePicker } from "@components/CustomDatePicker"; // plasmic-import: VK1n1PVMidjU/codeComponent
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { UploadImage } from "@components/UploadImage"; // plasmic-import: tO0oon6_re-a/codeComponent
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantssdh9N1Hl4P9M } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: SDH9n1Hl4p9m/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7YxWRrh3dN23tQ7PqjX2hp/projectcss
import sty from "./PlasmicDashboardProviderNewEvent.module.css"; // plasmic-import: 2yhM4hehNDCv/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: JoOaxx2eTHjW/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: JT75l_Xzekjr/icon

createPlasmicElementProxy;

export type PlasmicDashboardProviderNewEvent__VariantMembers = {};
export type PlasmicDashboardProviderNewEvent__VariantsArgs = {};
type VariantPropType = keyof PlasmicDashboardProviderNewEvent__VariantsArgs;
export const PlasmicDashboardProviderNewEvent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicDashboardProviderNewEvent__ArgsType = {};
type ArgPropType = keyof PlasmicDashboardProviderNewEvent__ArgsType;
export const PlasmicDashboardProviderNewEvent__ArgProps =
  new Array<ArgPropType>();

export type PlasmicDashboardProviderNewEvent__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  main?: Flex__<"main">;
  dashboard?: Flex__<"section">;
  body?: Flex__<"section">;
  aktivity?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  left?: Flex__<"div">;
  name?: Flex__<typeof TextInputWhite>;
  date2?: Flex__<typeof CustomDatePicker>;
  repeat?: Flex__<typeof AntdSelect>;
  startTime?: Flex__<typeof TextInputWhite>;
  duration?: Flex__<typeof TextInputWhite>;
  capacity?: Flex__<typeof TextInputWhite>;
  priceSelect?: Flex__<typeof AntdSelect>;
  setPrice?: Flex__<typeof TextInputWhite>;
  checkbox?: Flex__<typeof AntdCheckbox>;
  checkbox2?: Flex__<typeof AntdCheckbox>;
  checkbox3?: Flex__<typeof AntdCheckbox>;
  checkbox4?: Flex__<typeof AntdCheckbox>;
  checkbox5?: Flex__<typeof AntdCheckbox>;
  checkbox6?: Flex__<typeof AntdCheckbox>;
  checkbox7?: Flex__<typeof AntdCheckbox>;
  checkbox8?: Flex__<typeof AntdCheckbox>;
  street?: Flex__<typeof TextInputWhite>;
  citySelect?: Flex__<typeof AntdSelect>;
  adPop?: Flex__<typeof TextInputWhite>;
  adOr?: Flex__<typeof TextInputWhite>;
  category?: Flex__<typeof FormItemWrapper>;
  categorySelect?: Flex__<typeof AntdSelect>;
  subCategory?: Flex__<typeof FormItemWrapper>;
  subCategorySelect?: Flex__<typeof AntdSelect>;
  description?: Flex__<typeof AntdTextArea>;
  right?: Flex__<"div">;
  uploadImage?: Flex__<typeof UploadImage>;
  frame?: Flex__<"section">;
  frame3?: Flex__<"section">;
  frame2?: Flex__<"section">;
  upload3?: Flex__<typeof UploadWrapper>;
  uploadImagesButton?: Flex__<typeof AntdButton>;
  uploadImages?: Flex__<typeof UploadImages>;
  left2?: Flex__<"div">;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
};

export interface DefaultDashboardProviderNewEventProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDashboardProviderNewEvent__RenderFunc(props: {
  variants: PlasmicDashboardProviderNewEvent__VariantsArgs;
  args: PlasmicDashboardProviderNewEvent__ArgsType;
  overrides: PlasmicDashboardProviderNewEvent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "name.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "repeat.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "startTime.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "street.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "adPop.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "adOr.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "citySelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "categorySelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "capacity.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "priceSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "setPrice.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "checkbox.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox2.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox3.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox4.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox5.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox6.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox7.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox8.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "date",
        type: "private",
        variableType: "dateString",
        initFunc: ({ $props, $state, $queries, $ctx }) => null
      },
      {
        path: "duration.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "description.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "subCategorySelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "mainImage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "galeryImages",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "upload3.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "setId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "bbbbbbbb"
      },
      {
        path: "galeryLinks",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "finished",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "fade",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "eventPreview",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "previewUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssdh9N1Hl4P9M()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicDashboardProviderNewEvent.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicDashboardProviderNewEvent.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicDashboardProviderNewEvent.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__vf1Np)}>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <main
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              className={classNames(projectcss.all, sty.main)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__a2Bk)}>
                <section
                  data-plasmic-name={"dashboard"}
                  data-plasmic-override={overrides.dashboard}
                  className={classNames(projectcss.all, sty.dashboard)}
                >
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__jceu2
                    )}
                    component={Link}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToDashboardProvider"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/provozovatel/${"activity"}`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToDashboardProvider"] != null &&
                        typeof $steps["goToDashboardProvider"] === "object" &&
                        typeof $steps["goToDashboardProvider"].then ===
                          "function"
                      ) {
                        $steps["goToDashboardProvider"] = await $steps[
                          "goToDashboardProvider"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__k5Ir8
                      )}
                    >
                      {"Spr\u00e1va aktivit"}
                    </h4>
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__zsfWe
                    )}
                    component={Link}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToDashboardProvider"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/provozovatel/${"profile"}`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToDashboardProvider"] != null &&
                        typeof $steps["goToDashboardProvider"] === "object" &&
                        typeof $steps["goToDashboardProvider"].then ===
                          "function"
                      ) {
                        $steps["goToDashboardProvider"] = await $steps[
                          "goToDashboardProvider"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__oY6Fh
                      )}
                    >
                      {"Nastaven\u00ed profilu"}
                    </h4>
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__pS5
                    )}
                    component={Link}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToDashboardProvider"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/provozovatel/${"stats"}`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToDashboardProvider"] != null &&
                        typeof $steps["goToDashboardProvider"] === "object" &&
                        typeof $steps["goToDashboardProvider"].then ===
                          "function"
                      ) {
                        $steps["goToDashboardProvider"] = await $steps[
                          "goToDashboardProvider"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__g1SO
                      )}
                    >
                      {"Statistiky"}
                    </h4>
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__oIfBs
                    )}
                    component={Link}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToDashboardProvider"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/provozovatel/${"payment"}`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToDashboardProvider"] != null &&
                        typeof $steps["goToDashboardProvider"] === "object" &&
                        typeof $steps["goToDashboardProvider"].then ===
                          "function"
                      ) {
                        $steps["goToDashboardProvider"] = await $steps[
                          "goToDashboardProvider"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__jgQx3
                      )}
                    >
                      {"P\u0159edplatn\u00e9 a platby"}
                    </h4>
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__nbl28
                    )}
                    component={Link}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToDashboardProvider"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/provozovatel/${"account"}`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToDashboardProvider"] != null &&
                        typeof $steps["goToDashboardProvider"] === "object" &&
                        typeof $steps["goToDashboardProvider"].then ===
                          "function"
                      ) {
                        $steps["goToDashboardProvider"] = await $steps[
                          "goToDashboardProvider"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__dUBtn
                      )}
                    >
                      {"Nastaven\u00ed \u00fa\u010dtu"}
                    </h4>
                  </PlasmicLink__>
                </section>
                <section
                  data-plasmic-name={"body"}
                  data-plasmic-override={overrides.body}
                  className={classNames(projectcss.all, sty.body)}
                >
                  <div
                    data-plasmic-name={"aktivity"}
                    data-plasmic-override={overrides.aktivity}
                    className={classNames(projectcss.all, sty.aktivity)}
                    style={(() => {
                      try {
                        return (() => {
                          {
                            gap: "2vh";
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__daaT)}
                      style={(() => {
                        try {
                          return {
                            display: !$state.fade ? "block" : "none",
                            opacity: !$state.fade ? 1 : 0,
                            animation: !$state.fade
                              ? "fadeIn 200ms ease-in-out"
                              : "none",
                            transition: "opacity 200ms ease-in-out"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__o4FLf
                        )}
                      >
                        {"Vypl\u0148te pot\u0159ebn\u00e9 \u00fadaje"}
                      </h3>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.form),
                          extendedOnValuesChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["form", "value"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);

                            (async (changedValues, allValues) => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          formItems: [
                            { label: "Name", name: "name", inputType: "Text" },
                            {
                              label: "Message",
                              name: "message",
                              inputType: "Text Area"
                            }
                          ],
                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: "advanced",
                          onFinish: async values => {
                            const $steps = {};

                            $steps["setId"] = (
                              $state.mainImage && $state.mainImage !== ""
                                ? true
                                : false
                            )
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["setId"]
                                    },
                                    operation: 0,
                                    value: Math.random()
                                      .toString(36)
                                      .substr(2, 8)
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["setId"] != null &&
                              typeof $steps["setId"] === "object" &&
                              typeof $steps["setId"].then === "function"
                            ) {
                              $steps["setId"] = await $steps["setId"];
                            }

                            $steps["supabaseUploadFile"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "wdYFAdktabwm1cGWzppM7o",
                                      opId: "c1d9b484-1806-41f6-b9a3-3fe38a929dd7",
                                      userArgs: {
                                        bucket: [
                                          $ctx.userData.eventsLink,
                                          $state.setId
                                        ],
                                        path: [
                                          Math.random()
                                            .toString(36)
                                            .substr(2, 8)
                                        ],
                                        content: [$state.mainImage[0]],
                                        contentType: ["image/webp"]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["supabaseUploadFile"] != null &&
                              typeof $steps["supabaseUploadFile"] ===
                                "object" &&
                              typeof $steps["supabaseUploadFile"].then ===
                                "function"
                            ) {
                              $steps["supabaseUploadFile"] = await $steps[
                                "supabaseUploadFile"
                              ];
                            }

                            $steps["supabaseUploadThumbnail"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "wdYFAdktabwm1cGWzppM7o",
                                      opId: "778f8693-94ce-4ea1-8262-f0184d00f872",
                                      userArgs: {
                                        bucket: [
                                          $ctx.userData.eventsLink,
                                          $state.setId
                                        ],
                                        path: [
                                          Math.random()
                                            .toString(36)
                                            .substr(2, 8)
                                        ],
                                        content: [$state.mainImage[1]],
                                        contentType: ["image/webp"]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["supabaseUploadThumbnail"] != null &&
                              typeof $steps["supabaseUploadThumbnail"] ===
                                "object" &&
                              typeof $steps["supabaseUploadThumbnail"].then ===
                                "function"
                            ) {
                              $steps["supabaseUploadThumbnail"] = await $steps[
                                "supabaseUploadThumbnail"
                              ];
                            }

                            $steps["runActionOnUploadImages"] = true
                              ? (() => {
                                  const actionArgs = {
                                    tplRef: "uploadImages",
                                    action: "setUpload"
                                  };
                                  return (({ tplRef, action, args }) => {
                                    return $refs?.[tplRef]?.[action]?.(
                                      ...(args ?? [])
                                    );
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runActionOnUploadImages"] != null &&
                              typeof $steps["runActionOnUploadImages"] ===
                                "object" &&
                              typeof $steps["runActionOnUploadImages"].then ===
                                "function"
                            ) {
                              $steps["runActionOnUploadImages"] = await $steps[
                                "runActionOnUploadImages"
                              ];
                            }

                            $steps["postgresCreate"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "f8Ug9pq9YCTH5iNERcsX8T",
                                      opId: "24d8e867-a879-4eea-9152-261fdb8d27df",
                                      userArgs: {
                                        variables: [
                                          {
                                            adress: `${$state.street.value} ${$state.adPop.value}/${$state.adOr.value}, ${$state.citySelect.value}`,
                                            category: (() => {
                                              const queryCache = JSON.parse(
                                                localStorage.getItem(
                                                  "queryCache"
                                                )
                                              );
                                              const filteredItem =
                                                queryCache?.category?.find(
                                                  item =>
                                                    item.webURL ===
                                                    $state.categorySelect.value
                                                );
                                              return filteredItem
                                                ? filteredItem.name
                                                : null;
                                            })(),
                                            created_at:
                                              new Date().toISOString(),
                                            date: `${$state.date} ${$state.startTime.value}:00`,
                                            duration: parseInt(
                                              $state.duration.value,
                                              10
                                            ),
                                            howMany: parseInt(
                                              $state.capacity.value,
                                              10
                                            ),
                                            name: $state.name.value,
                                            price:
                                              $state.priceSelect.value ===
                                              "Zdarma"
                                                ? 0
                                                : Number($state.setPrice.value),
                                            provider:
                                              $ctx.userData.providerName,
                                            providerID:
                                              $ctx.userData.eventsLink,
                                            subCategory: [
                                              $state.subCategorySelect.value
                                            ],
                                            mainImage:
                                              "https://rnrfdxtsdvmxhjsoqoid.supabase.co/storage/v1/object/public/eventsStorage/" +
                                              $ctx.userData.eventsLink +
                                              "/" +
                                              $state.setId +
                                              "/m/" +
                                              $steps.supabaseUploadFile.path,
                                            thumbnail:
                                              "https://rnrfdxtsdvmxhjsoqoid.supabase.co/storage/v1/object/public/eventsStorage/" +
                                              $ctx.userData.eventsLink +
                                              "/" +
                                              $state.setId +
                                              "/t/" +
                                              $steps.supabaseUploadThumbnail
                                                .path,
                                            gallery: $state.galeryLinks,
                                            webUrl: (() => {
                                              const name =
                                                typeof $state.name.value ===
                                                "string"
                                                  ? $state.name.value
                                                      .replace(/\s+/g, "-")
                                                      .toLowerCase()
                                                  : "";
                                              return `${name}-${$state.setId}`;
                                            })(),
                                            description:
                                              $state.description.value
                                          }
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["postgresCreate"] != null &&
                              typeof $steps["postgresCreate"] === "object" &&
                              typeof $steps["postgresCreate"].then ===
                                "function"
                            ) {
                              $steps["postgresCreate"] = await $steps[
                                "postgresCreate"
                              ];
                            }

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        $state.date = null;
                                        $state.galeryImages = "";
                                        $state.galeryLinks = "";
                                        $state.mainImage = "";
                                        $state.setId = "";
                                        ($state.upload3 = { files: [] }),
                                          ($state.fade = true);
                                        $state.previewUrl =
                                          typeof $state.name.value === "string"
                                            ? $state.name.value
                                                .replace(/\s+/g, "-")
                                                .toLowerCase()
                                            : "";
                                        const webUrlValue = `${name}-${$state.setId}`;
                                        return webUrlValue;
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["runActionOnForm"] = true
                              ? (() => {
                                  const actionArgs = {
                                    tplRef: "form",
                                    action: "clearFields"
                                  };
                                  return (({ tplRef, action, args }) => {
                                    return $refs?.[tplRef]?.[action]?.(
                                      ...(args ?? [])
                                    );
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runActionOnForm"] != null &&
                              typeof $steps["runActionOnForm"] === "object" &&
                              typeof $steps["runActionOnForm"].then ===
                                "function"
                            ) {
                              $steps["runActionOnForm"] = await $steps[
                                "runActionOnForm"
                              ];
                            }
                          },
                          onIsSubmittingChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["form", "isSubmitting"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          ref: ref => {
                            $refs["form"] = ref;
                          },
                          submitSlot: null,
                          validateTrigger: ["onSubmit"],
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "form.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "form.isSubmitting"
                            }
                          ],
                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <FormWrapper
                            data-plasmic-name={"form"}
                            data-plasmic-override={overrides.form}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__i1DMl
                              )}
                              style={(() => {
                                try {
                                  return {
                                    gap: "2vw"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <div
                                data-plasmic-name={"left"}
                                data-plasmic-override={overrides.left}
                                className={classNames(projectcss.all, sty.left)}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___7YtB
                                  )}
                                  style={(() => {
                                    try {
                                      return {
                                        gap: "2vh"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__nHlj0
                                    )}
                                  >
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__ff1Qb
                                      )}
                                    >
                                      <React.Fragment>
                                        <React.Fragment>
                                          {"N\u00e1zev aktivity"}
                                        </React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "var(--token-PYK52BJYJXxZ)"
                                          }}
                                        >
                                          {"*"}
                                        </span>
                                      </React.Fragment>
                                    </h4>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__fbLk3
                                      )}
                                      label={"Name"}
                                      noLabel={true}
                                      noStyle={true}
                                      preserve={false}
                                      rules={[
                                        {
                                          ruleType: "required",
                                          message:
                                            "N\u00e1zev je vy\u017eadov\u00e1n"
                                        }
                                      ]}
                                    >
                                      <TextInputWhite
                                        data-plasmic-name={"name"}
                                        data-plasmic-override={overrides.name}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.name
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          ((...eventArgs) => {
                                            generateStateOnChangeProp($state, [
                                              "name",
                                              "value"
                                            ])(
                                              (e => e.target?.value).apply(
                                                null,
                                                eventArgs
                                              )
                                            );
                                          }).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }
                                        }}
                                        placeholder={
                                          "nap\u0159.: Divadeln\u00ed ve\u010der & Den um\u011bn\u00ed"
                                        }
                                        required={true}
                                        value={
                                          generateStateValueProp($state, [
                                            "name",
                                            "value"
                                          ]) ?? ""
                                        }
                                      />
                                    </FormItemWrapper>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__cJeyV
                                    )}
                                  >
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__szAt3
                                      )}
                                    >
                                      <React.Fragment>
                                        <React.Fragment>
                                          {"Datum kon\u00e1n\u00ed"}
                                        </React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "var(--token-PYK52BJYJXxZ)"
                                          }}
                                        >
                                          {"*"}
                                        </span>
                                      </React.Fragment>
                                    </h4>
                                    <CustomDatePicker
                                      data-plasmic-name={"date2"}
                                      data-plasmic-override={overrides.date2}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.date2
                                      )}
                                      date={``}
                                      onDateChange={async date => {
                                        const $steps = {};

                                        $steps["updateDate"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["date"]
                                                },
                                                operation: 0,
                                                value: date
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateDate"] != null &&
                                          typeof $steps["updateDate"] ===
                                            "object" &&
                                          typeof $steps["updateDate"].then ===
                                            "function"
                                        ) {
                                          $steps["updateDate"] = await $steps[
                                            "updateDate"
                                          ];
                                        }
                                      }}
                                    />

                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4___9KOfC
                                      )}
                                    >
                                      <React.Fragment>
                                        <React.Fragment>
                                          {"Opakov\u00e1n\u00ed"}
                                        </React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "var(--token-PYK52BJYJXxZ)"
                                          }}
                                        >
                                          {"*"}
                                        </span>
                                      </React.Fragment>
                                    </h4>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__qBlkz
                                      )}
                                      label={"Name"}
                                      name={"repVal"}
                                      noLabel={true}
                                      noStyle={(() => {
                                        try {
                                          return $refs.form.formInstance.getFieldError(
                                            "repVal"
                                          ).length === 0
                                            ? true
                                            : false;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      preserve={false}
                                      rules={[
                                        {
                                          ruleType: "required",
                                          message:
                                            "Je pot\u0159eba vybrat jednu mo\u017enost"
                                        }
                                      ]}
                                      validateTrigger={["onSubmit"]}
                                    >
                                      <AntdSelect
                                        data-plasmic-name={"repeat"}
                                        data-plasmic-override={overrides.repeat}
                                        bordered={true}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.repeat
                                        )}
                                        defaultOpen={false}
                                        defaultStylesClassName={classNames(
                                          projectcss.root_reset,
                                          projectcss.plasmic_default_styles,
                                          projectcss.plasmic_mixins,
                                          projectcss.plasmic_tokens,
                                          plasmic_antd_5_hostless_css.plasmic_tokens,
                                          plasmic_plasmic_rich_components_css.plasmic_tokens
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "repeat",
                                            "value"
                                          ]).apply(null, eventArgs);
                                        }}
                                        optionClassName={classNames({
                                          [sty["pcls_z_bxBUQ6vw_b"]]: true
                                        })}
                                        options={(() => {
                                          const __composite = [
                                            {
                                              value: null,
                                              label: null,
                                              type: "option"
                                            },
                                            {
                                              value: null,
                                              label: null,
                                              type: "option"
                                            },
                                            {
                                              type: "option",
                                              value: null,
                                              label: null
                                            }
                                          ];
                                          __composite["0"]["value"] = "single";
                                          __composite["0"]["label"] =
                                            "Jednor\u00e1zov\u00e1 ud\u00e1lost";
                                          __composite["1"]["value"] = "weekly";
                                          __composite["1"]["label"] =
                                            "1x t\u00fddn\u011b";
                                          __composite["2"]["value"] = "monthly";
                                          __composite["2"]["label"] =
                                            "1x m\u011bs\u00ed\u010dn\u011b";
                                          return __composite;
                                        })()}
                                        placeholder={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__yiucp
                                            )}
                                          >
                                            {"Zvolte mo\u017enost"}
                                          </div>
                                        }
                                        placeholderClassName={classNames({
                                          [sty["pcls_a67gZhLHhV1d"]]: true
                                        })}
                                        popupClassName={classNames({
                                          [sty["pcls_Om_v-06SWh21"]]: true
                                        })}
                                        popupScopeClassName={
                                          sty["repeat__popup"]
                                        }
                                        showSearch={false}
                                        triggerClassName={classNames({
                                          [sty["pcls_eJYTxk_o01em"]]: true
                                        })}
                                        value={generateStateValueProp($state, [
                                          "repeat",
                                          "value"
                                        ])}
                                      />
                                    </FormItemWrapper>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___5XLpJ
                                    )}
                                  >
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__iwrMe
                                      )}
                                    >
                                      <React.Fragment>
                                        <React.Fragment>
                                          {"Za\u010d\u00e1tek aktivity"}
                                        </React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "var(--token-PYK52BJYJXxZ)"
                                          }}
                                        >
                                          {"*"}
                                        </span>
                                      </React.Fragment>
                                    </h4>
                                    <TextInputWhite
                                      data-plasmic-name={"startTime"}
                                      data-plasmic-override={
                                        overrides.startTime
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.startTime
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "startTime",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      required={true}
                                      type={"time"}
                                      value={
                                        generateStateValueProp($state, [
                                          "startTime",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />

                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__hngC4
                                      )}
                                    >
                                      <React.Fragment>
                                        <React.Fragment>
                                          {"Doba trv\u00e1n\u00ed"}
                                        </React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "var(--token-PYK52BJYJXxZ)"
                                          }}
                                        >
                                          {"*"}
                                        </span>
                                      </React.Fragment>
                                    </h4>
                                    <TextInputWhite
                                      data-plasmic-name={"duration"}
                                      data-plasmic-override={overrides.duration}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.duration
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "duration",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={"v minut\u00e1ch"}
                                      required={true}
                                      type={"number"}
                                      value={
                                        generateStateValueProp($state, [
                                          "duration",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__phPqW
                                    )}
                                  >
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__pRbq5
                                      )}
                                    >
                                      <React.Fragment>
                                        <React.Fragment>
                                          {"Po\u010det osob"}
                                        </React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "var(--token-PYK52BJYJXxZ)"
                                          }}
                                        >
                                          {"*"}
                                        </span>
                                      </React.Fragment>
                                    </h4>
                                    <TextInputWhite
                                      data-plasmic-name={"capacity"}
                                      data-plasmic-override={overrides.capacity}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.capacity
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "capacity",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={
                                        "maxim\u00e1ln\u00ed kapacita"
                                      }
                                      required={true}
                                      type={"number"}
                                      value={
                                        generateStateValueProp($state, [
                                          "capacity",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />

                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__hZqF
                                      )}
                                    >
                                      <React.Fragment>
                                        <React.Fragment>
                                          {"Cena"}
                                        </React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "var(--token-PYK52BJYJXxZ)"
                                          }}
                                        >
                                          {"*"}
                                        </span>
                                      </React.Fragment>
                                    </h4>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__q97
                                      )}
                                      label={"Name"}
                                      name={"priVal"}
                                      noLabel={true}
                                      noStyle={true}
                                      preserve={false}
                                      trigger={"priVal"}
                                    >
                                      <AntdSelect
                                        data-plasmic-name={"priceSelect"}
                                        data-plasmic-override={
                                          overrides.priceSelect
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.priceSelect
                                        )}
                                        defaultStylesClassName={classNames(
                                          projectcss.root_reset,
                                          projectcss.plasmic_default_styles,
                                          projectcss.plasmic_mixins,
                                          projectcss.plasmic_tokens,
                                          plasmic_antd_5_hostless_css.plasmic_tokens,
                                          plasmic_plasmic_rich_components_css.plasmic_tokens
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "priceSelect",
                                            "value"
                                          ]).apply(null, eventArgs);
                                        }}
                                        optionClassName={classNames({
                                          [sty["pcls_hezEmHd9yvAA"]]: true
                                        })}
                                        options={(() => {
                                          const __composite = [
                                            {
                                              value: null,
                                              label: null,
                                              type: "option"
                                            },
                                            {
                                              value: null,
                                              label: null,
                                              type: "option"
                                            }
                                          ];
                                          __composite["0"]["value"] = "free";
                                          __composite["0"]["label"] = "Zdarma";
                                          __composite["1"]["value"] = "price";
                                          __composite["1"]["label"] =
                                            "Stanovit cenu";
                                          return __composite;
                                        })()}
                                        placeholder={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__mBa5L
                                            )}
                                          >
                                            {"Zvolte mo\u017enost"}
                                          </div>
                                        }
                                        placeholderClassName={classNames({
                                          [sty["pcls_KpZcOKOEeFcK"]]: true
                                        })}
                                        popupClassName={classNames({
                                          [sty["pcls_fD4TifeBLTca"]]: true
                                        })}
                                        popupScopeClassName={
                                          sty["priceSelect__popup"]
                                        }
                                        triggerClassName={classNames({
                                          [sty["pcls_govJgHWLxEE5"]]: true
                                        })}
                                        value={generateStateValueProp($state, [
                                          "priceSelect",
                                          "value"
                                        ])}
                                      />
                                    </FormItemWrapper>
                                  </div>
                                  {(() => {
                                    try {
                                      return $state.priceSelect.value ===
                                        "price"
                                        ? true
                                        : false;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___1P4P
                                      )}
                                    >
                                      <h4
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h4,
                                          projectcss.__wab_text,
                                          sty.h4__qq6Bd
                                        )}
                                      >
                                        {"Stanovte cenu"}
                                      </h4>
                                      <TextInputWhite
                                        data-plasmic-name={"setPrice"}
                                        data-plasmic-override={
                                          overrides.setPrice
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.setPrice
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          ((...eventArgs) => {
                                            generateStateOnChangeProp($state, [
                                              "setPrice",
                                              "value"
                                            ])(
                                              (e => e.target?.value).apply(
                                                null,
                                                eventArgs
                                              )
                                            );
                                          }).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }
                                        }}
                                        placeholder={"zadejte cenu v K\u010d"}
                                        type={"number"}
                                        value={
                                          generateStateValueProp($state, [
                                            "setPrice",
                                            "value"
                                          ]) ?? ""
                                        }
                                      />
                                    </div>
                                  ) : null}
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__hLthd
                                    )}
                                  >
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__kFw3
                                      )}
                                    >
                                      {"Dostupnost"}
                                    </h4>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__bnhL
                                      )}
                                    >
                                      <AntdCheckbox
                                        data-plasmic-name={"checkbox"}
                                        data-plasmic-override={
                                          overrides.checkbox
                                        }
                                        checked={generateStateValueProp(
                                          $state,
                                          ["checkbox", "checked"]
                                        )}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.checkbox
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "checkbox",
                                            "checked"
                                          ]).apply(null, eventArgs);
                                        }}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__kj2L9
                                          )}
                                        >
                                          {"vhodn\u00e9 pro OZP"}
                                        </div>
                                      </AntdCheckbox>
                                      <AntdCheckbox
                                        data-plasmic-name={"checkbox2"}
                                        data-plasmic-override={
                                          overrides.checkbox2
                                        }
                                        checked={generateStateValueProp(
                                          $state,
                                          ["checkbox2", "checked"]
                                        )}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.checkbox2
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "checkbox2",
                                            "checked"
                                          ]).apply(null, eventArgs);
                                        }}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__yQlAd
                                          )}
                                        >
                                          {"pro d\u011bti"}
                                        </div>
                                      </AntdCheckbox>
                                      <AntdCheckbox
                                        data-plasmic-name={"checkbox3"}
                                        data-plasmic-override={
                                          overrides.checkbox3
                                        }
                                        checked={generateStateValueProp(
                                          $state,
                                          ["checkbox3", "checked"]
                                        )}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.checkbox3
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "checkbox3",
                                            "checked"
                                          ]).apply(null, eventArgs);
                                        }}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__gJrcC
                                          )}
                                        >
                                          {"option 1"}
                                        </div>
                                      </AntdCheckbox>
                                      <AntdCheckbox
                                        data-plasmic-name={"checkbox4"}
                                        data-plasmic-override={
                                          overrides.checkbox4
                                        }
                                        checked={generateStateValueProp(
                                          $state,
                                          ["checkbox4", "checked"]
                                        )}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.checkbox4
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "checkbox4",
                                            "checked"
                                          ]).apply(null, eventArgs);
                                        }}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__oDqd5
                                          )}
                                        >
                                          {"option 2"}
                                        </div>
                                      </AntdCheckbox>
                                      <AntdCheckbox
                                        data-plasmic-name={"checkbox5"}
                                        data-plasmic-override={
                                          overrides.checkbox5
                                        }
                                        checked={generateStateValueProp(
                                          $state,
                                          ["checkbox5", "checked"]
                                        )}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.checkbox5
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "checkbox5",
                                            "checked"
                                          ]).apply(null, eventArgs);
                                        }}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__ceNq
                                          )}
                                        >
                                          {"option 3"}
                                        </div>
                                      </AntdCheckbox>
                                      <AntdCheckbox
                                        data-plasmic-name={"checkbox6"}
                                        data-plasmic-override={
                                          overrides.checkbox6
                                        }
                                        checked={generateStateValueProp(
                                          $state,
                                          ["checkbox6", "checked"]
                                        )}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.checkbox6
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "checkbox6",
                                            "checked"
                                          ]).apply(null, eventArgs);
                                        }}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___74R4D
                                          )}
                                        >
                                          {"option 4"}
                                        </div>
                                      </AntdCheckbox>
                                      <AntdCheckbox
                                        data-plasmic-name={"checkbox7"}
                                        data-plasmic-override={
                                          overrides.checkbox7
                                        }
                                        checked={generateStateValueProp(
                                          $state,
                                          ["checkbox7", "checked"]
                                        )}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.checkbox7
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "checkbox7",
                                            "checked"
                                          ]).apply(null, eventArgs);
                                        }}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___7MqB
                                          )}
                                        >
                                          {"option 5"}
                                        </div>
                                      </AntdCheckbox>
                                      <AntdCheckbox
                                        data-plasmic-name={"checkbox8"}
                                        data-plasmic-override={
                                          overrides.checkbox8
                                        }
                                        checked={generateStateValueProp(
                                          $state,
                                          ["checkbox8", "checked"]
                                        )}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.checkbox8
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "checkbox8",
                                            "checked"
                                          ]).apply(null, eventArgs);
                                        }}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__f6UQk
                                          )}
                                        >
                                          {"option 6"}
                                        </div>
                                      </AntdCheckbox>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__hb8N
                                    )}
                                  >
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4___3K1B
                                      )}
                                    >
                                      {"M\u00edsto kon\u00e1n\u00ed:"}
                                    </h4>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__rZF8
                                    )}
                                  >
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__iyIr
                                      )}
                                    >
                                      <React.Fragment>
                                        <React.Fragment>
                                          {"Ulice"}
                                        </React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "var(--token-PYK52BJYJXxZ)"
                                          }}
                                        >
                                          {"*"}
                                        </span>
                                      </React.Fragment>
                                    </h4>
                                    <TextInputWhite
                                      data-plasmic-name={"street"}
                                      data-plasmic-override={overrides.street}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.street
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "street",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      required={true}
                                      type={"text"}
                                      value={
                                        generateStateValueProp($state, [
                                          "street",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__yOlz
                                    )}
                                  >
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__sJeVh
                                      )}
                                    >
                                      <React.Fragment>
                                        <React.Fragment>
                                          {"M\u011bsto"}
                                        </React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "var(--token-PYK52BJYJXxZ)"
                                          }}
                                        >
                                          {"*"}
                                        </span>
                                      </React.Fragment>
                                    </h4>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__c0GMx
                                      )}
                                      label={"Name"}
                                      name={"citVal"}
                                      noLabel={true}
                                      noStyle={true}
                                      trigger={"citVal"}
                                    >
                                      <AntdSelect
                                        data-plasmic-name={"citySelect"}
                                        data-plasmic-override={
                                          overrides.citySelect
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.citySelect
                                        )}
                                        defaultStylesClassName={classNames(
                                          projectcss.root_reset,
                                          projectcss.plasmic_default_styles,
                                          projectcss.plasmic_mixins,
                                          projectcss.plasmic_tokens,
                                          plasmic_antd_5_hostless_css.plasmic_tokens,
                                          plasmic_plasmic_rich_components_css.plasmic_tokens
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "citySelect",
                                            "value"
                                          ]).apply(null, eventArgs);
                                        }}
                                        optionClassName={classNames({
                                          [sty["pcls_g4bb8BKb36J2"]]: true
                                        })}
                                        options={(() => {
                                          const __composite = [
                                            {
                                              value: null,
                                              label: null,
                                              type: "option"
                                            },
                                            {
                                              value: null,
                                              label: null,
                                              type: "option"
                                            },
                                            {
                                              type: "option",
                                              value: null,
                                              label: null
                                            },
                                            {
                                              type: "option",
                                              value: null,
                                              label: null
                                            },
                                            {
                                              type: "option",
                                              value: null,
                                              label: null
                                            }
                                          ];
                                          __composite["0"]["value"] =
                                            "Hav\u00ed\u0159ov";
                                          __composite["0"]["label"] =
                                            "Hav\u00ed\u0159ov";
                                          __composite["1"]["value"] =
                                            "T\u011brlicko";
                                          __composite["1"]["label"] =
                                            "T\u011brlicko";
                                          __composite["2"]["value"] =
                                            "Doln\u00ed Such\u00e1";
                                          __composite["2"]["label"] =
                                            "Doln\u00ed Such\u00e1";
                                          __composite["3"]["value"] =
                                            "St\u0159edn\u00ed Such\u00e1";
                                          __composite["3"]["label"] =
                                            "St\u0159edn\u00ed Such\u00e1";
                                          __composite["4"]["value"] =
                                            "Horn\u00ed Such\u00e1";
                                          __composite["4"]["label"] =
                                            "Horn\u00ed Such\u00e1";
                                          return __composite;
                                        })()}
                                        placeholder={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__olpwQ
                                            )}
                                          >
                                            {"Vyberte m\u011bsto"}
                                          </div>
                                        }
                                        placeholderClassName={classNames({
                                          [sty["pcls_Uls0yF02u_pI"]]: true
                                        })}
                                        popupClassName={classNames({
                                          [sty["pcls_nu7SzdC7KJgm"]]: true
                                        })}
                                        popupScopeClassName={
                                          sty["citySelect__popup"]
                                        }
                                        triggerClassName={classNames({
                                          [sty["pcls_vvoCKsJBRT2r"]]: true
                                        })}
                                        value={generateStateValueProp($state, [
                                          "citySelect",
                                          "value"
                                        ])}
                                      />
                                    </FormItemWrapper>
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__nes3
                                      )}
                                    >
                                      <React.Fragment>
                                        <React.Fragment>
                                          {"\u010d.pop./\u010d.ori."}
                                        </React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "var(--token-PYK52BJYJXxZ)"
                                          }}
                                        >
                                          {"*"}
                                        </span>
                                      </React.Fragment>
                                    </h4>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__kVzyf
                                      )}
                                    >
                                      <TextInputWhite
                                        data-plasmic-name={"adPop"}
                                        data-plasmic-override={overrides.adPop}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.adPop
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          ((...eventArgs) => {
                                            generateStateOnChangeProp($state, [
                                              "adPop",
                                              "value"
                                            ])(
                                              (e => e.target?.value).apply(
                                                null,
                                                eventArgs
                                              )
                                            );
                                          }).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }
                                        }}
                                        required={true}
                                        type={"text"}
                                        value={
                                          generateStateValueProp($state, [
                                            "adPop",
                                            "value"
                                          ]) ?? ""
                                        }
                                      />

                                      <h4
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h4,
                                          projectcss.__wab_text,
                                          sty.h4__wsgEg
                                        )}
                                      >
                                        {" / "}
                                      </h4>
                                      <TextInputWhite
                                        data-plasmic-name={"adOr"}
                                        data-plasmic-override={overrides.adOr}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.adOr
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          ((...eventArgs) => {
                                            generateStateOnChangeProp($state, [
                                              "adOr",
                                              "value"
                                            ])(
                                              (e => e.target?.value).apply(
                                                null,
                                                eventArgs
                                              )
                                            );
                                          }).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }
                                        }}
                                        required={true}
                                        type={"text"}
                                        value={
                                          generateStateValueProp($state, [
                                            "adOr",
                                            "value"
                                          ]) ?? ""
                                        }
                                      />
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___00D0S
                                    )}
                                  >
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__fdfWv
                                      )}
                                    >
                                      <React.Fragment>
                                        <React.Fragment>
                                          {"Kategorie"}
                                        </React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "var(--token-PYK52BJYJXxZ)"
                                          }}
                                        >
                                          {"*"}
                                        </span>
                                      </React.Fragment>
                                    </h4>
                                    <FormItemWrapper
                                      data-plasmic-name={"category"}
                                      data-plasmic-override={overrides.category}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.category
                                      )}
                                      label={"Name"}
                                      noLabel={true}
                                      noStyle={true}
                                    >
                                      <AntdSelect
                                        data-plasmic-name={"categorySelect"}
                                        data-plasmic-override={
                                          overrides.categorySelect
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.categorySelect
                                        )}
                                        defaultStylesClassName={classNames(
                                          projectcss.root_reset,
                                          projectcss.plasmic_default_styles,
                                          projectcss.plasmic_mixins,
                                          projectcss.plasmic_tokens,
                                          plasmic_antd_5_hostless_css.plasmic_tokens,
                                          plasmic_plasmic_rich_components_css.plasmic_tokens
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "categorySelect",
                                            "value"
                                          ]).apply(null, eventArgs);

                                          (async (value, option) => {
                                            const $steps = {};

                                            $steps["runCode"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    customFunction:
                                                      async () => {
                                                        return ($state.subCategorySelect =
                                                          {});
                                                      }
                                                  };
                                                  return (({
                                                    customFunction
                                                  }) => {
                                                    return customFunction();
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["runCode"] != null &&
                                              typeof $steps["runCode"] ===
                                                "object" &&
                                              typeof $steps["runCode"].then ===
                                                "function"
                                            ) {
                                              $steps["runCode"] = await $steps[
                                                "runCode"
                                              ];
                                            }
                                          }).apply(null, eventArgs);
                                        }}
                                        optionClassName={classNames({
                                          [sty["pcls_xNrpBNw2OAJI"]]: true
                                        })}
                                        options={(() => {
                                          try {
                                            return (() => {
                                              const options = JSON.parse(
                                                localStorage.getItem(
                                                  "queryCache"
                                                )
                                              ).category.map(item => ({
                                                value: item.webURL,
                                                label: item.name
                                              }));
                                              return options;
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()}
                                        placeholder={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__g82U
                                            )}
                                          >
                                            {"Zvolte kategorii"}
                                          </div>
                                        }
                                        placeholderClassName={classNames({
                                          [sty["pcls_2Q3C-V8sRs9h"]]: true
                                        })}
                                        popupClassName={classNames({
                                          [sty["pcls_hEVpS0KpP6iX"]]: true
                                        })}
                                        popupScopeClassName={
                                          sty["categorySelect__popup"]
                                        }
                                        triggerClassName={classNames({
                                          [sty["pcls_BRtKRvzcpHwd"]]: true
                                        })}
                                        value={generateStateValueProp($state, [
                                          "categorySelect",
                                          "value"
                                        ])}
                                      />
                                    </FormItemWrapper>
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__hbqza
                                      )}
                                    >
                                      <React.Fragment>
                                        <React.Fragment>
                                          {"Zam\u011b\u0159en\u00ed"}
                                        </React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "var(--token-PYK52BJYJXxZ)"
                                          }}
                                        >
                                          {"*"}
                                        </span>
                                      </React.Fragment>
                                    </h4>
                                    <FormItemWrapper
                                      data-plasmic-name={"subCategory"}
                                      data-plasmic-override={
                                        overrides.subCategory
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.subCategory
                                      )}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__dj28O
                                          )}
                                        >
                                          {"Label"}
                                        </div>
                                      }
                                      noLabel={true}
                                      noStyle={true}
                                      preserve={false}
                                    >
                                      <AntdSelect
                                        data-plasmic-name={"subCategorySelect"}
                                        data-plasmic-override={
                                          overrides.subCategorySelect
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.subCategorySelect
                                        )}
                                        defaultStylesClassName={classNames(
                                          projectcss.root_reset,
                                          projectcss.plasmic_default_styles,
                                          projectcss.plasmic_mixins,
                                          projectcss.plasmic_tokens,
                                          plasmic_antd_5_hostless_css.plasmic_tokens,
                                          plasmic_plasmic_rich_components_css.plasmic_tokens
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "subCategorySelect",
                                            "value"
                                          ]).apply(null, eventArgs);
                                        }}
                                        optionClassName={classNames({
                                          [sty["pcls_pYgDpylj4ASF"]]: true
                                        })}
                                        options={(() => {
                                          try {
                                            return (() => {
                                              return (
                                                JSON.parse(
                                                  localStorage.getItem(
                                                    "queryCache"
                                                  )
                                                )
                                                  ?.category.find(
                                                    item =>
                                                      item.webURL ===
                                                      $state.categorySelect
                                                        .value
                                                  )
                                                  ?.subCategory.map(sub => ({
                                                    value: sub,
                                                    label: sub
                                                  })) || []
                                              );
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()}
                                        placeholder={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__qNal3
                                            )}
                                          >
                                            {"Zvolte kategorii"}
                                          </div>
                                        }
                                        placeholderClassName={classNames({
                                          [sty["pcls_tkcgKhHh-fCb"]]: true
                                        })}
                                        popupClassName={classNames({
                                          [sty["pcls__U9o0mkBOHsz"]]: true
                                        })}
                                        popupScopeClassName={
                                          sty["subCategorySelect__popup"]
                                        }
                                        triggerClassName={classNames({
                                          [sty["pcls_1yDJ7ezVUUCp"]]: true
                                        })}
                                        value={generateStateValueProp($state, [
                                          "subCategorySelect",
                                          "value"
                                        ])}
                                      />
                                    </FormItemWrapper>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__l9XrL
                                    )}
                                  >
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__vcx2I
                                      )}
                                    >
                                      {"Popis aktivity:"}
                                    </h4>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__zZed2
                                      )}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___7HpcX
                                          )}
                                        >
                                          {"Label"}
                                        </div>
                                      }
                                      name={"desVal"}
                                      noLabel={true}
                                      noStyle={true}
                                    >
                                      {(() => {
                                        const child$Props = {
                                          autoSize: true,
                                          className: classNames(
                                            "__wab_instance",
                                            sty.description
                                          ),
                                          onChange: async (
                                            ...eventArgs: any
                                          ) => {
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "value",
                                              ["description", "value"],
                                              AntdTextArea_Helpers
                                            ).apply(null, eventArgs);
                                          },
                                          value: generateStateValueProp(
                                            $state,
                                            ["description", "value"]
                                          )
                                        };
                                        initializeCodeComponentStates(
                                          $state,
                                          [
                                            {
                                              name: "value",
                                              plasmicStateName:
                                                "description.value"
                                            }
                                          ],
                                          [],
                                          AntdTextArea_Helpers ?? {},
                                          child$Props
                                        );

                                        return (
                                          <AntdTextArea
                                            data-plasmic-name={"description"}
                                            data-plasmic-override={
                                              overrides.description
                                            }
                                            {...child$Props}
                                          />
                                        );
                                      })()}
                                    </FormItemWrapper>
                                  </div>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"right"}
                                data-plasmic-override={overrides.right}
                                className={classNames(
                                  projectcss.all,
                                  sty.right
                                )}
                                style={(() => {
                                  try {
                                    return {
                                      gap: "1vh"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___8KitG
                                  )}
                                >
                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__z8XpK
                                    )}
                                  >
                                    <React.Fragment>
                                      <React.Fragment>
                                        {
                                          "P\u0159idejte hlavn\u00ed fotku ud\u00e1losti"
                                        }
                                      </React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-PYK52BJYJXxZ)"
                                        }}
                                      >
                                        {"*"}
                                      </span>
                                    </React.Fragment>
                                  </h4>
                                </div>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__zqvi9
                                  )}
                                  initialValue={null}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__b1Y5N
                                      )}
                                    >
                                      {"Label"}
                                    </div>
                                  }
                                  name={"mainImageVal"}
                                  noLabel={true}
                                  noStyle={false}
                                  rules={[
                                    {
                                      ruleType: "advanced",
                                      custom: (rule, value) => {
                                        return $state.mainImage &&
                                          $state.mainImage !== ""
                                          ? true
                                          : false;
                                      },
                                      message:
                                        "Pros\u00edm, nahrajte hlavn\u00ed fotografii"
                                    }
                                  ]}
                                  validateTrigger={["onSubmit"]}
                                >
                                  <section
                                    className={classNames(
                                      projectcss.all,
                                      sty.section__y6Vh7
                                    )}
                                  >
                                    <AntdButton
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__fuD5A
                                      )}
                                      onClick={async () => {
                                        const $steps = {};

                                        $steps["runActionOnUploadImage"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                tplRef: "uploadImage",
                                                action: "setUpload"
                                              };
                                              return (({
                                                tplRef,
                                                action,
                                                args
                                              }) => {
                                                return $refs?.[tplRef]?.[
                                                  action
                                                ]?.(...(args ?? []));
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["runActionOnUploadImage"] !=
                                            null &&
                                          typeof $steps[
                                            "runActionOnUploadImage"
                                          ] === "object" &&
                                          typeof $steps[
                                            "runActionOnUploadImage"
                                          ].then === "function"
                                        ) {
                                          $steps["runActionOnUploadImage"] =
                                            await $steps[
                                              "runActionOnUploadImage"
                                            ];
                                        }
                                      }}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__vIoCq
                                        )}
                                      >
                                        {"P\u0159idat hlavn\u00ed fotku"}
                                      </div>
                                    </AntdButton>
                                    {(() => {
                                      try {
                                        return (
                                          $state.mainImage &&
                                          $state.mainImage.length > 0
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__b9Fer)}
                                        displayHeight={"auto"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"auto"}
                                        loading={"lazy"}
                                        src={(() => {
                                          try {
                                            return `data:image/webp;base64,${$state.mainImage[1]}`;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />
                                    ) : null}
                                    {(() => {
                                      try {
                                        return (
                                          $state.mainImage &&
                                          $state.mainImage.length > 0
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <AntdButton
                                        className={classNames(
                                          "__wab_instance",
                                          sty.button__hidry
                                        )}
                                        onClick={async () => {
                                          const $steps = {};

                                          $steps["updateMainImage"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: ["mainImage"]
                                                  },
                                                  operation: 1
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    undefined
                                                  );
                                                  return undefined;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateMainImage"] != null &&
                                            typeof $steps["updateMainImage"] ===
                                              "object" &&
                                            typeof $steps["updateMainImage"]
                                              .then === "function"
                                          ) {
                                            $steps["updateMainImage"] =
                                              await $steps["updateMainImage"];
                                          }
                                        }}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__w4RTn
                                          )}
                                        >
                                          {"Smazat"}
                                        </div>
                                      </AntdButton>
                                    ) : null}
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__d4VsA
                                      )}
                                    >
                                      <UploadImage
                                        data-plasmic-name={"uploadImage"}
                                        data-plasmic-override={
                                          overrides.uploadImage
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.uploadImage
                                        )}
                                        onBase64Change={async (
                                          highResBase64,
                                          lowResBase64
                                        ) => {
                                          const $steps = {};

                                          $steps["updateMainImage"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: ["mainImage"]
                                                  },
                                                  operation: 0,
                                                  value: [
                                                    highResBase64,
                                                    lowResBase64
                                                  ]
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateMainImage"] != null &&
                                            typeof $steps["updateMainImage"] ===
                                              "object" &&
                                            typeof $steps["updateMainImage"]
                                              .then === "function"
                                          ) {
                                            $steps["updateMainImage"] =
                                              await $steps["updateMainImage"];
                                          }
                                        }}
                                        ref={ref => {
                                          $refs["uploadImage"] = ref;
                                        }}
                                      />
                                    </div>
                                  </section>
                                </FormItemWrapper>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__uo2BA
                                  )}
                                >
                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__qoYxG
                                    )}
                                  >
                                    <React.Fragment>
                                      <React.Fragment>
                                        {
                                          "P\u0159idejte fotografie do galerie (max. 10 fotek)"
                                        }
                                      </React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-PYK52BJYJXxZ)"
                                        }}
                                      >
                                        {"*"}
                                      </span>
                                    </React.Fragment>
                                  </h4>
                                  {(() => {
                                    try {
                                      return $state.galeryImages &&
                                        $state.galeryImages.length > 0
                                        ? true
                                        : !$state.galeryImages ||
                                          $state.galeryImages.length === 0
                                        ? false
                                        : false;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <AntdButton
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__n3LFp
                                      )}
                                      loading={false}
                                      onClick={async () => {
                                        const $steps = {};

                                        $steps["updateUpload3Files"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "upload3",
                                                    "files"
                                                  ]
                                                },
                                                operation: 1
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  undefined
                                                );
                                                return undefined;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateUpload3Files"] !=
                                            null &&
                                          typeof $steps[
                                            "updateUpload3Files"
                                          ] === "object" &&
                                          typeof $steps["updateUpload3Files"]
                                            .then === "function"
                                        ) {
                                          $steps["updateUpload3Files"] =
                                            await $steps["updateUpload3Files"];
                                        }

                                        $steps["updateGaleryImages"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["galeryImages"]
                                                },
                                                operation: 1
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  undefined
                                                );
                                                return undefined;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateGaleryImages"] !=
                                            null &&
                                          typeof $steps[
                                            "updateGaleryImages"
                                          ] === "object" &&
                                          typeof $steps["updateGaleryImages"]
                                            .then === "function"
                                        ) {
                                          $steps["updateGaleryImages"] =
                                            await $steps["updateGaleryImages"];
                                        }
                                      }}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__geErj
                                        )}
                                      >
                                        {"Smazat v\u0161e"}
                                      </div>
                                    </AntdButton>
                                  ) : null}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___0PbTe
                                  )}
                                  style={(() => {
                                    try {
                                      return {
                                        gap: "1vh"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  {(() => {
                                    try {
                                      return $state.galeryImages &&
                                        $state.galeryImages.length > 0
                                        ? true
                                        : !$state.galeryImages ||
                                          $state.galeryImages.length === 0
                                        ? false
                                        : false;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                                    ? (_par =>
                                        !_par
                                          ? []
                                          : Array.isArray(_par)
                                          ? _par
                                          : [_par])(
                                        (() => {
                                          try {
                                            return $state.galeryImages;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                      ).map(
                                        (__plasmic_item_0, __plasmic_idx_0) => {
                                          const galeryPreview =
                                            __plasmic_item_0;
                                          const galeryIndex = __plasmic_idx_0;
                                          return (
                                            <section
                                              data-plasmic-name={"frame"}
                                              data-plasmic-override={
                                                overrides.frame
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                sty.frame
                                              )}
                                              key={galeryIndex}
                                            >
                                              {galeryIndex <
                                              $state.galeryImages.length ? (
                                                <section
                                                  data-plasmic-name={"frame3"}
                                                  data-plasmic-override={
                                                    overrides.frame3
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.frame3
                                                  )}
                                                >
                                                  <PlasmicImg__
                                                    alt={""}
                                                    className={classNames(
                                                      sty.img__ca9S8
                                                    )}
                                                    displayHeight={"auto"}
                                                    displayMaxHeight={"none"}
                                                    displayMaxWidth={"100%"}
                                                    displayMinHeight={"0"}
                                                    displayMinWidth={"0"}
                                                    displayWidth={"100%"}
                                                    loading={"lazy"}
                                                    src={`data:image/webp;base64,${galeryPreview.contents}`}
                                                  />

                                                  {(() => {
                                                    try {
                                                      return (
                                                        galeryIndex <=
                                                        $state.galeryImages
                                                          .length -
                                                          1
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return true;
                                                      }
                                                      throw e;
                                                    }
                                                  })() ? (
                                                    <AntdButton
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.button__ud3Tm
                                                      )}
                                                      onClick={async () => {
                                                        const $steps = {};

                                                        $steps["runCode"] = true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  customFunction:
                                                                    async () => {
                                                                      return $state.galeryImages.splice(
                                                                        galeryIndex,
                                                                        1
                                                                      );
                                                                    }
                                                                };
                                                              return (({
                                                                customFunction
                                                              }) => {
                                                                return customFunction();
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                        if (
                                                          $steps["runCode"] !=
                                                            null &&
                                                          typeof $steps[
                                                            "runCode"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "runCode"
                                                          ].then === "function"
                                                        ) {
                                                          $steps["runCode"] =
                                                            await $steps[
                                                              "runCode"
                                                            ];
                                                        }
                                                      }}
                                                    >
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          projectcss.__wab_text,
                                                          sty.text__ri50Z
                                                        )}
                                                      >
                                                        {"Smazat"}
                                                      </div>
                                                    </AntdButton>
                                                  ) : null}
                                                </section>
                                              ) : null}
                                            </section>
                                          );
                                        }
                                      )
                                    : null}
                                  {(() => {
                                    try {
                                      return $state.galeryImages.length < 10;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <section
                                      data-plasmic-name={"frame2"}
                                      data-plasmic-override={overrides.frame2}
                                      className={classNames(
                                        projectcss.all,
                                        sty.frame2
                                      )}
                                    >
                                      <UploadWrapper
                                        data-plasmic-name={"upload3"}
                                        data-plasmic-override={
                                          overrides.upload3
                                        }
                                        accept={"image/*"}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.upload3
                                        )}
                                        files={generateStateValueProp($state, [
                                          "upload3",
                                          "files"
                                        ])}
                                        listType={"picture"}
                                        multiple={true}
                                        onFilesChange={async (
                                          ...eventArgs: any
                                        ) => {
                                          generateStateOnChangeProp($state, [
                                            "upload3",
                                            "files"
                                          ]).apply(null, eventArgs);

                                          (async files => {
                                            const $steps = {};

                                            $steps["updateGaleryImages"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "galeryImages"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value:
                                                      ($state.galeryImages =
                                                        $state.galeryImages
                                                          ?.length
                                                          ? [
                                                              ...new Map(
                                                                [
                                                                  ...$state.galeryImages,
                                                                  ...$state.upload3.files.sort(
                                                                    (a, b) =>
                                                                      a.lastModified -
                                                                      b.lastModified
                                                                  )
                                                                ].map(file => [
                                                                  file.name +
                                                                    file.lastModified,
                                                                  file
                                                                ])
                                                              ).values()
                                                            ].slice(0, 10)
                                                          : $state.upload3.files
                                                              .sort(
                                                                (a, b) =>
                                                                  a.lastModified -
                                                                  b.lastModified
                                                              )
                                                              .slice(0, 10))
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateGaleryImages"] !=
                                                null &&
                                              typeof $steps[
                                                "updateGaleryImages"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateGaleryImages"
                                              ].then === "function"
                                            ) {
                                              $steps["updateGaleryImages"] =
                                                await $steps[
                                                  "updateGaleryImages"
                                                ];
                                            }
                                          }).apply(null, eventArgs);
                                        }}
                                        showUploadList={false}
                                      >
                                        <AntdButton
                                          data-plasmic-name={
                                            "uploadImagesButton"
                                          }
                                          data-plasmic-override={
                                            overrides.uploadImagesButton
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.uploadImagesButton
                                          )}
                                          onClick={async () => {
                                            const $steps = {};

                                            $steps["updateUpload3Files"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "upload3",
                                                        "files"
                                                      ]
                                                    },
                                                    operation: 1
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      undefined
                                                    );
                                                    return undefined;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateUpload3Files"] !=
                                                null &&
                                              typeof $steps[
                                                "updateUpload3Files"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateUpload3Files"
                                              ].then === "function"
                                            ) {
                                              $steps["updateUpload3Files"] =
                                                await $steps[
                                                  "updateUpload3Files"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__r5U32
                                            )}
                                          >
                                            {"Nahr\u00e1t"}
                                          </div>
                                        </AntdButton>
                                      </UploadWrapper>
                                    </section>
                                  ) : null}
                                </div>
                                {(() => {
                                  try {
                                    return $ctx.userData ? true : false;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___5Fkv9
                                    )}
                                  >
                                    <UploadImages
                                      data-plasmic-name={"uploadImages"}
                                      data-plasmic-override={
                                        overrides.uploadImages
                                      }
                                      bucket={"eventsStorage"}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.uploadImages
                                      )}
                                      inputImages={(() => {
                                        try {
                                          return $state.galeryImages.map(
                                            image => image.contents
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onUploadUrls={async urls => {
                                        const $steps = {};

                                        $steps["updateGaleryLinks"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["galeryLinks"]
                                                },
                                                operation: 0,
                                                value: urls
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateGaleryLinks"] != null &&
                                          typeof $steps["updateGaleryLinks"] ===
                                            "object" &&
                                          typeof $steps["updateGaleryLinks"]
                                            .then === "function"
                                        ) {
                                          $steps["updateGaleryLinks"] =
                                            await $steps["updateGaleryLinks"];
                                        }
                                      }}
                                      path={(() => {
                                        try {
                                          return (
                                            $ctx.userData.eventsLink +
                                            "/" +
                                            $state.setId
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "undefined";
                                          }
                                          throw e;
                                        }
                                      })()}
                                      ref={ref => {
                                        $refs["uploadImages"] = ref;
                                      }}
                                    />
                                  </div>
                                ) : null}
                              </div>
                            </div>
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button__bcW0P
                              )}
                              submitsForm={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__enXA
                                )}
                              >
                                {"P\u0159idat novou ud\u00e1lost"}
                              </div>
                            </AntdButton>
                          </FormWrapper>
                        );
                      })()}
                    </div>
                    <div
                      data-plasmic-name={"left2"}
                      data-plasmic-override={overrides.left2}
                      className={classNames(projectcss.all, sty.left2)}
                      style={(() => {
                        try {
                          return {
                            display: $state.fade ? "block" : "none",
                            opacity: $state.fade ? 1 : 0,
                            animation: $state.fade
                              ? "fadeIn 200ms ease-in-out"
                              : "none",
                            transition: "opacity 200ms ease-in-out"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <DataFetcher
                        data-plasmic-name={"httpRestApiFetcher"}
                        data-plasmic-override={overrides.httpRestApiFetcher}
                        className={classNames(
                          "__wab_instance",
                          sty.httpRestApiFetcher
                        )}
                        dataName={"returnItem"}
                        errorDisplay={
                          <DataCtxReader__>
                            {$ctx => "Error fetching data"}
                          </DataCtxReader__>
                        }
                        errorName={"fetchError"}
                        headers={{
                          "Content-Type": "application/json",
                          apikey:
                            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJucmZkeHRzZHZteGhqc29xb2lkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjE4MjQyNTcsImV4cCI6MjAzNzQwMDI1N30.N-1_fY2KLrl9sxmeM8z3bRc-b0ksQ0C4IWQpugCs65I"
                        }}
                        loadingDisplay={
                          <DataCtxReader__>
                            {$ctx => "Loading..."}
                          </DataCtxReader__>
                        }
                        method={"GET"}
                        noLayout={false}
                        url={(() => {
                          try {
                            return (
                              "https://rnrfdxtsdvmxhjsoqoid.supabase.co/rest/v1/events?webUrl=eq." +
                              $state.previewUrl
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <DataCtxReader__>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cWlsf
                              )}
                            >
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  projectcss.__wab_text,
                                  sty.h3__csusy
                                )}
                              >
                                {
                                  "A m\u00e1te hotovo! Va\u0161e ud\u00e1lost bude brzy online."
                                }
                              </h3>
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  projectcss.__wab_text,
                                  sty.h3__wMlQk
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["postgresGetList"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "f8Ug9pq9YCTH5iNERcsX8T",
                                            opId: "d9cf0cd1-6cc7-4012-8525-1e7118ea46a7",
                                            userArgs: {},
                                            cacheKey: null,
                                            invalidatedKeys: null,
                                            roleId: null
                                          }
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["postgresGetList"] != null &&
                                    typeof $steps["postgresGetList"] ===
                                      "object" &&
                                    typeof $steps["postgresGetList"].then ===
                                      "function"
                                  ) {
                                    $steps["postgresGetList"] = await $steps[
                                      "postgresGetList"
                                    ];
                                  }

                                  $steps["updateEventPreview"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["eventPreview"]
                                          },
                                          operation: 0,
                                          value: $steps.postgresGetList
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateEventPreview"] != null &&
                                    typeof $steps["updateEventPreview"] ===
                                      "object" &&
                                    typeof $steps["updateEventPreview"].then ===
                                      "function"
                                  ) {
                                    $steps["updateEventPreview"] = await $steps[
                                      "updateEventPreview"
                                    ];
                                  }
                                }}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      fontWeight: 400,
                                      fontStyle: "italic"
                                    }}
                                  >
                                    {
                                      '"D\u016fraz na detail p\u0159in\u00e1\u0161\u00ed trval\u00e9 v\u00fdsledky."'
                                    }
                                  </span>
                                </React.Fragment>
                              </h3>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___8Shw5
                                )}
                                style={(() => {
                                  try {
                                    return {
                                      gap: "2vh"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___1Smfz
                                  )}
                                  style={(() => {
                                    try {
                                      return {
                                        gap: "1vh"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__k3BG8
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.returnItem
                                            ? "Zde si můžete Vaši událost\n" +
                                                $ctx.returnItem[0].name +
                                                "\nprohlédnout"
                                            : "Zde si můžete Vaši událost prohlédnout";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Zde si m\u016f\u017eete Va\u0161i ud\u00e1losti prohl\u00e9dnout.";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <AntdButton
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__bnk02
                                    )}
                                    onClick={async () => {
                                      const $steps = {};

                                      $steps["goToEvent"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              destination: `/${(() => {
                                                try {
                                                  return JSON.parse(
                                                    localStorage.getItem(
                                                      "queryCache"
                                                    )
                                                  ).category.find(
                                                    item =>
                                                      item.name ===
                                                      $ctx.returnItem[0]
                                                        .category
                                                  ).webURL;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}/${(() => {
                                                try {
                                                  return $ctx.returnItem[0]
                                                    .webUrl;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}`
                                            };
                                            return (({ destination }) => {
                                              if (
                                                typeof destination ===
                                                  "string" &&
                                                destination.startsWith("#")
                                              ) {
                                                document
                                                  .getElementById(
                                                    destination.substr(1)
                                                  )
                                                  .scrollIntoView({
                                                    behavior: "smooth"
                                                  });
                                              } else {
                                                __nextRouter?.push(destination);
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["goToEvent"] != null &&
                                        typeof $steps["goToEvent"] ===
                                          "object" &&
                                        typeof $steps["goToEvent"].then ===
                                          "function"
                                      ) {
                                        $steps["goToEvent"] = await $steps[
                                          "goToEvent"
                                        ];
                                      }
                                    }}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__h3SVz
                                      )}
                                    >
                                      {"P\u0159ej\u00edt na ud\u00e1lost"}
                                    </div>
                                  </AntdButton>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__zPrly
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>{"Po "}</React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{ fontWeight: 700 }}
                                    >
                                      {"ov\u011b\u0159en\u00ed \u00fa\u010dtu"}
                                    </span>
                                    <React.Fragment>
                                      {
                                        " budete ji\u017e moci spravovat sv\u016fj \u00fa\u010det a p\u0159ipravovat sv\u00e9 aktivity."
                                      }
                                    </React.Fragment>
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__t3Obk
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>
                                      {"\nV n\u00e1sleduj\u00edc\u00edch "}
                                    </React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{ fontWeight: 700 }}
                                    >
                                      {"pracovn\u00edch dnech"}
                                    </span>
                                    <React.Fragment>
                                      {
                                        " V\u00e1s budeme kontaktovat a ov\u011b\u0159\u00edme si, \u017ee jste to sku\u0159e\u010dn\u011b Vy!\nN\u00e1sledn\u011b budete moci vyu\u017e\u00edvat V\u00e1\u0161 \u00fa\u010det naplno."
                                      }
                                    </React.Fragment>
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                          )}
                        </DataCtxReader__>
                      </DataFetcher>
                    </div>
                  </div>
                </section>
              </div>
            </main>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "main",
    "dashboard",
    "body",
    "aktivity",
    "form",
    "left",
    "name",
    "date2",
    "repeat",
    "startTime",
    "duration",
    "capacity",
    "priceSelect",
    "setPrice",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "checkbox5",
    "checkbox6",
    "checkbox7",
    "checkbox8",
    "street",
    "citySelect",
    "adPop",
    "adOr",
    "category",
    "categorySelect",
    "subCategory",
    "subCategorySelect",
    "description",
    "right",
    "uploadImage",
    "frame",
    "frame3",
    "frame2",
    "upload3",
    "uploadImagesButton",
    "uploadImages",
    "left2",
    "httpRestApiFetcher"
  ],
  header: ["header"],
  main: [
    "main",
    "dashboard",
    "body",
    "aktivity",
    "form",
    "left",
    "name",
    "date2",
    "repeat",
    "startTime",
    "duration",
    "capacity",
    "priceSelect",
    "setPrice",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "checkbox5",
    "checkbox6",
    "checkbox7",
    "checkbox8",
    "street",
    "citySelect",
    "adPop",
    "adOr",
    "category",
    "categorySelect",
    "subCategory",
    "subCategorySelect",
    "description",
    "right",
    "uploadImage",
    "frame",
    "frame3",
    "frame2",
    "upload3",
    "uploadImagesButton",
    "uploadImages",
    "left2",
    "httpRestApiFetcher"
  ],
  dashboard: ["dashboard"],
  body: [
    "body",
    "aktivity",
    "form",
    "left",
    "name",
    "date2",
    "repeat",
    "startTime",
    "duration",
    "capacity",
    "priceSelect",
    "setPrice",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "checkbox5",
    "checkbox6",
    "checkbox7",
    "checkbox8",
    "street",
    "citySelect",
    "adPop",
    "adOr",
    "category",
    "categorySelect",
    "subCategory",
    "subCategorySelect",
    "description",
    "right",
    "uploadImage",
    "frame",
    "frame3",
    "frame2",
    "upload3",
    "uploadImagesButton",
    "uploadImages",
    "left2",
    "httpRestApiFetcher"
  ],
  aktivity: [
    "aktivity",
    "form",
    "left",
    "name",
    "date2",
    "repeat",
    "startTime",
    "duration",
    "capacity",
    "priceSelect",
    "setPrice",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "checkbox5",
    "checkbox6",
    "checkbox7",
    "checkbox8",
    "street",
    "citySelect",
    "adPop",
    "adOr",
    "category",
    "categorySelect",
    "subCategory",
    "subCategorySelect",
    "description",
    "right",
    "uploadImage",
    "frame",
    "frame3",
    "frame2",
    "upload3",
    "uploadImagesButton",
    "uploadImages",
    "left2",
    "httpRestApiFetcher"
  ],
  form: [
    "form",
    "left",
    "name",
    "date2",
    "repeat",
    "startTime",
    "duration",
    "capacity",
    "priceSelect",
    "setPrice",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "checkbox5",
    "checkbox6",
    "checkbox7",
    "checkbox8",
    "street",
    "citySelect",
    "adPop",
    "adOr",
    "category",
    "categorySelect",
    "subCategory",
    "subCategorySelect",
    "description",
    "right",
    "uploadImage",
    "frame",
    "frame3",
    "frame2",
    "upload3",
    "uploadImagesButton",
    "uploadImages"
  ],
  left: [
    "left",
    "name",
    "date2",
    "repeat",
    "startTime",
    "duration",
    "capacity",
    "priceSelect",
    "setPrice",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "checkbox5",
    "checkbox6",
    "checkbox7",
    "checkbox8",
    "street",
    "citySelect",
    "adPop",
    "adOr",
    "category",
    "categorySelect",
    "subCategory",
    "subCategorySelect",
    "description"
  ],
  name: ["name"],
  date2: ["date2"],
  repeat: ["repeat"],
  startTime: ["startTime"],
  duration: ["duration"],
  capacity: ["capacity"],
  priceSelect: ["priceSelect"],
  setPrice: ["setPrice"],
  checkbox: ["checkbox"],
  checkbox2: ["checkbox2"],
  checkbox3: ["checkbox3"],
  checkbox4: ["checkbox4"],
  checkbox5: ["checkbox5"],
  checkbox6: ["checkbox6"],
  checkbox7: ["checkbox7"],
  checkbox8: ["checkbox8"],
  street: ["street"],
  citySelect: ["citySelect"],
  adPop: ["adPop"],
  adOr: ["adOr"],
  category: ["category", "categorySelect"],
  categorySelect: ["categorySelect"],
  subCategory: ["subCategory", "subCategorySelect"],
  subCategorySelect: ["subCategorySelect"],
  description: ["description"],
  right: [
    "right",
    "uploadImage",
    "frame",
    "frame3",
    "frame2",
    "upload3",
    "uploadImagesButton",
    "uploadImages"
  ],
  uploadImage: ["uploadImage"],
  frame: ["frame", "frame3"],
  frame3: ["frame3"],
  frame2: ["frame2", "upload3", "uploadImagesButton"],
  upload3: ["upload3", "uploadImagesButton"],
  uploadImagesButton: ["uploadImagesButton"],
  uploadImages: ["uploadImages"],
  left2: ["left2", "httpRestApiFetcher"],
  httpRestApiFetcher: ["httpRestApiFetcher"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  main: "main";
  dashboard: "section";
  body: "section";
  aktivity: "div";
  form: typeof FormWrapper;
  left: "div";
  name: typeof TextInputWhite;
  date2: typeof CustomDatePicker;
  repeat: typeof AntdSelect;
  startTime: typeof TextInputWhite;
  duration: typeof TextInputWhite;
  capacity: typeof TextInputWhite;
  priceSelect: typeof AntdSelect;
  setPrice: typeof TextInputWhite;
  checkbox: typeof AntdCheckbox;
  checkbox2: typeof AntdCheckbox;
  checkbox3: typeof AntdCheckbox;
  checkbox4: typeof AntdCheckbox;
  checkbox5: typeof AntdCheckbox;
  checkbox6: typeof AntdCheckbox;
  checkbox7: typeof AntdCheckbox;
  checkbox8: typeof AntdCheckbox;
  street: typeof TextInputWhite;
  citySelect: typeof AntdSelect;
  adPop: typeof TextInputWhite;
  adOr: typeof TextInputWhite;
  category: typeof FormItemWrapper;
  categorySelect: typeof AntdSelect;
  subCategory: typeof FormItemWrapper;
  subCategorySelect: typeof AntdSelect;
  description: typeof AntdTextArea;
  right: "div";
  uploadImage: typeof UploadImage;
  frame: "section";
  frame3: "section";
  frame2: "section";
  upload3: typeof UploadWrapper;
  uploadImagesButton: typeof AntdButton;
  uploadImages: typeof UploadImages;
  left2: "div";
  httpRestApiFetcher: typeof DataFetcher;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDashboardProviderNewEvent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDashboardProviderNewEvent__VariantsArgs;
    args?: PlasmicDashboardProviderNewEvent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDashboardProviderNewEvent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDashboardProviderNewEvent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDashboardProviderNewEvent__ArgProps,
          internalVariantPropNames:
            PlasmicDashboardProviderNewEvent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDashboardProviderNewEvent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboardProviderNewEvent";
  } else {
    func.displayName = `PlasmicDashboardProviderNewEvent.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboardProviderNewEvent = Object.assign(
  // Top-level PlasmicDashboardProviderNewEvent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    main: makeNodeComponent("main"),
    dashboard: makeNodeComponent("dashboard"),
    body: makeNodeComponent("body"),
    aktivity: makeNodeComponent("aktivity"),
    form: makeNodeComponent("form"),
    left: makeNodeComponent("left"),
    _name: makeNodeComponent("name"),
    date2: makeNodeComponent("date2"),
    repeat: makeNodeComponent("repeat"),
    startTime: makeNodeComponent("startTime"),
    duration: makeNodeComponent("duration"),
    capacity: makeNodeComponent("capacity"),
    priceSelect: makeNodeComponent("priceSelect"),
    setPrice: makeNodeComponent("setPrice"),
    checkbox: makeNodeComponent("checkbox"),
    checkbox2: makeNodeComponent("checkbox2"),
    checkbox3: makeNodeComponent("checkbox3"),
    checkbox4: makeNodeComponent("checkbox4"),
    checkbox5: makeNodeComponent("checkbox5"),
    checkbox6: makeNodeComponent("checkbox6"),
    checkbox7: makeNodeComponent("checkbox7"),
    checkbox8: makeNodeComponent("checkbox8"),
    street: makeNodeComponent("street"),
    citySelect: makeNodeComponent("citySelect"),
    adPop: makeNodeComponent("adPop"),
    adOr: makeNodeComponent("adOr"),
    category: makeNodeComponent("category"),
    categorySelect: makeNodeComponent("categorySelect"),
    subCategory: makeNodeComponent("subCategory"),
    subCategorySelect: makeNodeComponent("subCategorySelect"),
    description: makeNodeComponent("description"),
    right: makeNodeComponent("right"),
    uploadImage: makeNodeComponent("uploadImage"),
    frame: makeNodeComponent("frame"),
    frame3: makeNodeComponent("frame3"),
    frame2: makeNodeComponent("frame2"),
    upload3: makeNodeComponent("upload3"),
    uploadImagesButton: makeNodeComponent("uploadImagesButton"),
    uploadImages: makeNodeComponent("uploadImages"),
    left2: makeNodeComponent("left2"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),

    // Metadata about props expected for PlasmicDashboardProviderNewEvent
    internalVariantProps: PlasmicDashboardProviderNewEvent__VariantProps,
    internalArgProps: PlasmicDashboardProviderNewEvent__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Nastavení nové aktivity",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDashboardProviderNewEvent;
/* prettier-ignore-end */
