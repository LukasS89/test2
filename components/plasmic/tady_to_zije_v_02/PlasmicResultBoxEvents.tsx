// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7YxWRrh3dN23tQ7PqjX2hp
// Component: YbZTs13C0bC8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7YxWRrh3dN23tQ7PqjX2hp/projectcss
import sty from "./PlasmicResultBoxEvents.module.css"; // plasmic-import: YbZTs13C0bC8/css

createPlasmicElementProxy;

export type PlasmicResultBoxEvents__VariantMembers = {};
export type PlasmicResultBoxEvents__VariantsArgs = {};
type VariantPropType = keyof PlasmicResultBoxEvents__VariantsArgs;
export const PlasmicResultBoxEvents__VariantProps =
  new Array<VariantPropType>();

export type PlasmicResultBoxEvents__ArgsType = {
  data?: any;
  textSize?: number;
  color?: string;
};
type ArgPropType = keyof PlasmicResultBoxEvents__ArgsType;
export const PlasmicResultBoxEvents__ArgProps = new Array<ArgPropType>(
  "data",
  "textSize",
  "color"
);

export type PlasmicResultBoxEvents__OverridesType = {
  root?: Flex__<"section">;
  imagePreview?: Flex__<typeof PlasmicImg__>;
  h3?: Flex__<"h3">;
  overlay?: Flex__<"div">;
};

export interface DefaultResultBoxEventsProps {
  data?: any;
  textSize?: number;
  color?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicResultBoxEvents__RenderFunc(props: {
  variants: PlasmicResultBoxEvents__VariantsArgs;
  args: PlasmicResultBoxEvents__ArgsType;
  overrides: PlasmicResultBoxEvents__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div className={classNames(projectcss.all, sty.freeBox__mrs0J)}>
        <div className={classNames(projectcss.all, sty.freeBox___96R1C)}>
          {(() => {
            try {
              return $props.data.thumbnail > 0
                ? true
                : $props.data.gallery && $props.data.gallery.length > 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <PlasmicImg__
              data-plasmic-name={"imagePreview"}
              data-plasmic-override={overrides.imagePreview}
              alt={""}
              className={classNames(sty.imagePreview)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              height={"auto"}
              loading={"eager"}
              src={
                $props.data.thumbnail > 0
                  ? $props.data.thumbnail
                  : $props.data.gallery[0]
              }
              width={"100%"}
            />
          ) : null}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__pbu2X)}>
          <h3
            data-plasmic-name={"h3"}
            data-plasmic-override={overrides.h3}
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3
            )}
          >
            <React.Fragment>{$props.data.name}</React.Fragment>
          </h3>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iwfm9
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.data.adress;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__pa1R0)}
          style={(() => {
            try {
              return {
                backgroundColor:
                  $props.data.price && $props.data.price > 0
                    ? $props.color
                    : "#E9E9E9",
                border:
                  $props.data.price && $props.data.price > 0
                    ? "none"
                    : `1px solid ${$props.color}`
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fqFAe
            )}
            style={(() => {
              try {
                return {
                  color:
                    $props.data.price && $props.data.price > 0
                      ? "#E9E9E9"
                      : $props.color
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <React.Fragment>
              {(() => {
                let priceText;
                if ($props.data.price && $props.data.price > 0) {
                  return (priceText = `${Math.floor(
                    $props.data.price
                  ).toLocaleString("cs-CZ")} Kƒç`);
                } else {
                  return (priceText = "Zdarma");
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"overlay"}
        data-plasmic-override={overrides.overlay}
        className={classNames(projectcss.all, sty.overlay)}
        style={
          triggers.hover_root
            ? (() => {
                try {
                  return {
                    backgroundColor: `${$props.color}25`
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : undefined
        }
      />
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "imagePreview", "h3", "overlay"],
  imagePreview: ["imagePreview"],
  h3: ["h3"],
  overlay: ["overlay"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  imagePreview: typeof PlasmicImg__;
  h3: "h3";
  overlay: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicResultBoxEvents__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicResultBoxEvents__VariantsArgs;
    args?: PlasmicResultBoxEvents__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicResultBoxEvents__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicResultBoxEvents__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicResultBoxEvents__ArgProps,
          internalVariantPropNames: PlasmicResultBoxEvents__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicResultBoxEvents__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResultBoxEvents";
  } else {
    func.displayName = `PlasmicResultBoxEvents.${nodeName}`;
  }
  return func;
}

export const PlasmicResultBoxEvents = Object.assign(
  // Top-level PlasmicResultBoxEvents renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    imagePreview: makeNodeComponent("imagePreview"),
    h3: makeNodeComponent("h3"),
    overlay: makeNodeComponent("overlay"),

    // Metadata about props expected for PlasmicResultBoxEvents
    internalVariantProps: PlasmicResultBoxEvents__VariantProps,
    internalArgProps: PlasmicResultBoxEvents__ArgProps
  }
);

export default PlasmicResultBoxEvents;
/* prettier-ignore-end */
