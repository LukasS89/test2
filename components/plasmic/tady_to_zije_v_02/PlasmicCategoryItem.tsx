// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7YxWRrh3dN23tQ7PqjX2hp
// Component: Sa03e9TtRTn9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7YxWRrh3dN23tQ7PqjX2hp/projectcss
import sty from "./PlasmicCategoryItem.module.css"; // plasmic-import: Sa03e9TtRTn9/css

createPlasmicElementProxy;

export type PlasmicCategoryItem__VariantMembers = {};
export type PlasmicCategoryItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicCategoryItem__VariantsArgs;
export const PlasmicCategoryItem__VariantProps = new Array<VariantPropType>();

export type PlasmicCategoryItem__ArgsType = {
  url?: string;
  selectedItem?: any;
  color?: string;
  currentItem?: any;
  currentIndex?: any;
};
type ArgPropType = keyof PlasmicCategoryItem__ArgsType;
export const PlasmicCategoryItem__ArgProps = new Array<ArgPropType>(
  "url",
  "selectedItem",
  "color",
  "currentItem",
  "currentIndex"
);

export type PlasmicCategoryItem__OverridesType = {
  root?: Flex__<"section">;
  gradient?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultCategoryItemProps {
  url?: string;
  selectedItem?: any;
  color?: string;
  currentItem?: any;
  currentIndex?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCategoryItem__RenderFunc(props: {
  variants: PlasmicCategoryItem__VariantsArgs;
  args: PlasmicCategoryItem__ArgsType;
  overrides: PlasmicCategoryItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          url: "",
          selectedItem: {},
          color: "#222222"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      style={(() => {
        try {
          return (() => {
            {
              borderRight: $props.currentIndex !== 5
                ? "1px solid rgba(38, 45, 52, 0.15)"
                : "none";
            }
          })();
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div
        data-plasmic-name={"gradient"}
        data-plasmic-override={overrides.gradient}
        className={classNames(projectcss.all, sty.gradient)}
      />

      <div
        className={classNames(projectcss.all, sty.freeBox__fIb3D)}
        style={(() => {
          try {
            return {
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              height: "100%",
              width: "100%"
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <div className={classNames(projectcss.all, sty.freeBox__ykGot)}>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
            style={
              triggers.hover_root
                ? (() => {
                    try {
                      return {
                        color: $props.color
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return (() => {
                        {
                          color: $props.url === $props.selectedItem.webURL
                            ? $props.color
                            : "#222222";
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
            }
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.currentItem.name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Test kategorie";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "gradient", "text"],
  gradient: ["gradient"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  gradient: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCategoryItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCategoryItem__VariantsArgs;
    args?: PlasmicCategoryItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCategoryItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCategoryItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCategoryItem__ArgProps,
          internalVariantPropNames: PlasmicCategoryItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCategoryItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCategoryItem";
  } else {
    func.displayName = `PlasmicCategoryItem.${nodeName}`;
  }
  return func;
}

export const PlasmicCategoryItem = Object.assign(
  // Top-level PlasmicCategoryItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    gradient: makeNodeComponent("gradient"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicCategoryItem
    internalVariantProps: PlasmicCategoryItem__VariantProps,
    internalArgProps: PlasmicCategoryItem__ArgProps
  }
);

export default PlasmicCategoryItem;
/* prettier-ignore-end */
