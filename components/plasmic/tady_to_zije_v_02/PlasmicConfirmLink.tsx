// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7YxWRrh3dN23tQ7PqjX2hp
// Component: k-aRG--Ndakq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import Header from "../../Header"; // plasmic-import: uZX7p1wyVbCa/component
import CategoryMenu from "../../CategoryMenu"; // plasmic-import: nREGSf5d9U6b/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7YxWRrh3dN23tQ7PqjX2hp/projectcss
import sty from "./PlasmicConfirmLink.module.css"; // plasmic-import: k-aRG--Ndakq/css

createPlasmicElementProxy;

export type PlasmicConfirmLink__VariantMembers = {};
export type PlasmicConfirmLink__VariantsArgs = {};
type VariantPropType = keyof PlasmicConfirmLink__VariantsArgs;
export const PlasmicConfirmLink__VariantProps = new Array<VariantPropType>();

export type PlasmicConfirmLink__ArgsType = {};
type ArgPropType = keyof PlasmicConfirmLink__ArgsType;
export const PlasmicConfirmLink__ArgProps = new Array<ArgPropType>();

export type PlasmicConfirmLink__OverridesType = {
  root?: Flex__<"div">;
  timer?: Flex__<typeof Timer>;
  section?: Flex__<"section">;
  header?: Flex__<typeof Header>;
  main?: Flex__<"main">;
  categoryMenu?: Flex__<typeof CategoryMenu>;
  freeBox?: Flex__<"div">;
  h3?: Flex__<"h3">;
  embedHtml?: Flex__<typeof Embed>;
  text?: Flex__<"div">;
};

export interface DefaultConfirmLinkProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicConfirmLink__RenderFunc(props: {
  variants: PlasmicConfirmLink__VariantsArgs;
  args: PlasmicConfirmLink__ArgsType;
  overrides: PlasmicConfirmLink__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "reveal",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "categoryMenu.selectedItem",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "categoryMenu.selectedSubcategory",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "categoryMenu.selectedEvent",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(localStorage.getItem("queryCache")).events.find(
                item => item.webUrl === $props.eventUrl
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicConfirmLink.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicConfirmLink.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicConfirmLink.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Timer
            data-plasmic-name={"timer"}
            data-plasmic-override={overrides.timer}
            className={classNames("__wab_instance", sty.timer)}
            intervalSeconds={0.05}
            isRunning={!$state.reveal}
            onTick={async () => {
              const $steps = {};

              $steps["updateReveal"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["reveal"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateReveal"] != null &&
                typeof $steps["updateReveal"] === "object" &&
                typeof $steps["updateReveal"].then === "function"
              ) {
                $steps["updateReveal"] = await $steps["updateReveal"];
              }
            }}
            runWhileEditing={false}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <main
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              className={classNames(projectcss.all, sty.main)}
            >
              <CategoryMenu
                data-plasmic-name={"categoryMenu"}
                data-plasmic-override={overrides.categoryMenu}
                className={classNames("__wab_instance", sty.categoryMenu)}
                onSelectedEventChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "categoryMenu",
                    "selectedEvent"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onSelectedItemChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "categoryMenu",
                    "selectedItem"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onSelectedSubcategoryChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "categoryMenu",
                    "selectedSubcategory"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                selectedEvent={generateStateValueProp($state, [
                  "categoryMenu",
                  "selectedEvent"
                ])}
                selectedItem={generateStateValueProp($state, [
                  "categoryMenu",
                  "selectedItem"
                ])}
                selectedSubcategory={generateStateValueProp($state, [
                  "categoryMenu",
                  "selectedSubcategory"
                ])}
              />

              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <h3
                  data-plasmic-name={"h3"}
                  data-plasmic-override={overrides.h3}
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3
                  )}
                >
                  {
                    "Ov\u011b\u0159en\u00ed emalu prob\u011bhlo \u00fasp\u011b\u0161n\u011b!"
                  }
                </h3>
                <Embed
                  data-plasmic-name={"embedHtml"}
                  data-plasmic-override={overrides.embedHtml}
                  className={classNames("__wab_instance", sty.embedHtml)}
                  code={
                    'Nyn\u00ed se m\u016f\u017eete <a href="/login" target="_blank"><strong><u>p\u0159ihl\u00e1sit</u></strong></a> ke sv\u00e9mu \u00fa\u010dtu a za\u010d\u00edt spravovat svoje aktivity.\r\n'
                  }
                />

                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {"\nV n\u00e1sleduj\u00edc\u00edch "}
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"pracovn\u00edch dnech"}
                    </span>
                    <React.Fragment>
                      {
                        " V\u00e1s budeme kontaktovat a ov\u011b\u0159\u00edme si, \u017ee jste to sku\u0159e\u010dn\u011b Vy!\nN\u00e1sledn\u011b budete moci zve\u0159e\u0148ovat sv\u00e9 aktivy."
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            </main>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "timer",
    "section",
    "header",
    "main",
    "categoryMenu",
    "freeBox",
    "h3",
    "embedHtml",
    "text"
  ],
  timer: ["timer"],
  section: [
    "section",
    "header",
    "main",
    "categoryMenu",
    "freeBox",
    "h3",
    "embedHtml",
    "text"
  ],
  header: ["header"],
  main: ["main", "categoryMenu", "freeBox", "h3", "embedHtml", "text"],
  categoryMenu: ["categoryMenu"],
  freeBox: ["freeBox", "h3", "embedHtml", "text"],
  h3: ["h3"],
  embedHtml: ["embedHtml"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  timer: typeof Timer;
  section: "section";
  header: typeof Header;
  main: "main";
  categoryMenu: typeof CategoryMenu;
  freeBox: "div";
  h3: "h3";
  embedHtml: typeof Embed;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConfirmLink__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConfirmLink__VariantsArgs;
    args?: PlasmicConfirmLink__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicConfirmLink__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicConfirmLink__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicConfirmLink__ArgProps,
          internalVariantPropNames: PlasmicConfirmLink__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicConfirmLink__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicConfirmLink";
  } else {
    func.displayName = `PlasmicConfirmLink.${nodeName}`;
  }
  return func;
}

export const PlasmicConfirmLink = Object.assign(
  // Top-level PlasmicConfirmLink renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    timer: makeNodeComponent("timer"),
    section: makeNodeComponent("section"),
    header: makeNodeComponent("header"),
    main: makeNodeComponent("main"),
    categoryMenu: makeNodeComponent("categoryMenu"),
    freeBox: makeNodeComponent("freeBox"),
    h3: makeNodeComponent("h3"),
    embedHtml: makeNodeComponent("embedHtml"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicConfirmLink
    internalVariantProps: PlasmicConfirmLink__VariantProps,
    internalArgProps: PlasmicConfirmLink__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Potvzení emailu",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicConfirmLink;
/* prettier-ignore-end */
