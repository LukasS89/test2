// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7YxWRrh3dN23tQ7PqjX2hp
// Component: Bgwz9zADL-1Q

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: uZX7p1wyVbCa/component
import { TestButton } from "@components/TestButton"; // plasmic-import: lMlMn9sbzXci/codeComponent
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { EventRegistration } from "@components/EventRegistration"; // plasmic-import: rdbe5SFLGd9a/codeComponent
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInputWhite from "../../TextInputWhite"; // plasmic-import: BkB9iEume48d/component
import { CustomDatePicker } from "@components/CustomDatePicker"; // plasmic-import: VK1n1PVMidjU/codeComponent
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import { useScreenVariants as useScreenVariantssdh9N1Hl4P9M } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: SDH9n1Hl4p9m/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7YxWRrh3dN23tQ7PqjX2hp/projectcss
import sty from "./PlasmicDashboardProviderNewEvent3.module.css"; // plasmic-import: Bgwz9zADL-1Q/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: JoOaxx2eTHjW/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: JT75l_Xzekjr/icon

createPlasmicElementProxy;

export type PlasmicDashboardProviderNewEvent3__VariantMembers = {};
export type PlasmicDashboardProviderNewEvent3__VariantsArgs = {};
type VariantPropType = keyof PlasmicDashboardProviderNewEvent3__VariantsArgs;
export const PlasmicDashboardProviderNewEvent3__VariantProps =
  new Array<VariantPropType>();

export type PlasmicDashboardProviderNewEvent3__ArgsType = {};
type ArgPropType = keyof PlasmicDashboardProviderNewEvent3__ArgsType;
export const PlasmicDashboardProviderNewEvent3__ArgProps =
  new Array<ArgPropType>();

export type PlasmicDashboardProviderNewEvent3__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  main?: Flex__<"main">;
  testButton?: Flex__<typeof TestButton>;
  dashboard?: Flex__<"section">;
  body?: Flex__<"section">;
  aktivity?: Flex__<"div">;
  h3?: Flex__<"h3">;
  form?: Flex__<typeof FormWrapper>;
  left2?: Flex__<"div">;
  name?: Flex__<typeof TextInputWhite>;
  date2?: Flex__<typeof CustomDatePicker>;
  repeat?: Flex__<typeof AntdSelect>;
  startTime?: Flex__<typeof TextInputWhite>;
  duration?: Flex__<typeof TextInputWhite>;
  capacity?: Flex__<typeof TextInputWhite>;
  priceSelect?: Flex__<typeof AntdSelect>;
  setPrice?: Flex__<typeof TextInputWhite>;
  checkbox?: Flex__<typeof AntdCheckbox>;
  checkbox2?: Flex__<typeof AntdCheckbox>;
  checkbox3?: Flex__<typeof AntdCheckbox>;
  checkbox4?: Flex__<typeof AntdCheckbox>;
  checkbox5?: Flex__<typeof AntdCheckbox>;
  checkbox6?: Flex__<typeof AntdCheckbox>;
  checkbox7?: Flex__<typeof AntdCheckbox>;
  checkbox8?: Flex__<typeof AntdCheckbox>;
  street?: Flex__<typeof TextInputWhite>;
  citySelect?: Flex__<typeof AntdSelect>;
  adPop?: Flex__<typeof TextInputWhite>;
  adOr?: Flex__<typeof TextInputWhite>;
  category?: Flex__<typeof FormItemWrapper>;
  categorySelect?: Flex__<typeof AntdSelect>;
  subCategorySelect?: Flex__<typeof AntdSelect>;
  textArea?: Flex__<typeof AntdTextArea>;
  right?: Flex__<"div">;
  upload?: Flex__<typeof UploadWrapper>;
  upload2?: Flex__<typeof UploadWrapper>;
  eventRegistration?: Flex__<typeof EventRegistration>;
};

export interface DefaultDashboardProviderNewEvent3Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDashboardProviderNewEvent3__RenderFunc(props: {
  variants: PlasmicDashboardProviderNewEvent3__VariantsArgs;
  args: PlasmicDashboardProviderNewEvent3__ArgsType;
  overrides: PlasmicDashboardProviderNewEvent3__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "name.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "repeat.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "startTime.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "street.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "adPop.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "adOr.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "citySelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "categorySelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "subCategorySelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "capacity.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "priceSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "setPrice.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "checkbox.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox2.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox3.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox4.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox5.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox6.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox7.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox8.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "date",
        type: "private",
        variableType: "dateString",
        initFunc: ({ $props, $state, $queries, $ctx }) => null
      },
      {
        path: "duration.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "upload2.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssdh9N1Hl4P9M()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicDashboardProviderNewEvent3.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicDashboardProviderNewEvent3.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicDashboardProviderNewEvent3.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__zJygE)}>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <main
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              className={classNames(projectcss.all, sty.main)}
            >
              <TestButton
                data-plasmic-name={"testButton"}
                data-plasmic-override={overrides.testButton}
                buttonText={"Validate Session"}
                className={classNames("__wab_instance", sty.testButton)}
              />

              <div className={classNames(projectcss.all, sty.freeBox__waZiS)}>
                <section
                  data-plasmic-name={"dashboard"}
                  data-plasmic-override={overrides.dashboard}
                  className={classNames(projectcss.all, sty.dashboard)}
                >
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__yzsLj
                    )}
                    component={Link}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToDashboardProvider"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/provozovatel/${"activity"}`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToDashboardProvider"] != null &&
                        typeof $steps["goToDashboardProvider"] === "object" &&
                        typeof $steps["goToDashboardProvider"].then ===
                          "function"
                      ) {
                        $steps["goToDashboardProvider"] = await $steps[
                          "goToDashboardProvider"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__n1Kh
                      )}
                    >
                      {"Spr\u00e1va aktivit"}
                    </h4>
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__t3A7
                    )}
                    component={Link}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToDashboardProvider"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/provozovatel/${"profile"}`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToDashboardProvider"] != null &&
                        typeof $steps["goToDashboardProvider"] === "object" &&
                        typeof $steps["goToDashboardProvider"].then ===
                          "function"
                      ) {
                        $steps["goToDashboardProvider"] = await $steps[
                          "goToDashboardProvider"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__eQnjY
                      )}
                    >
                      {"Nastaven\u00ed profilu"}
                    </h4>
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__poz9K
                    )}
                    component={Link}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToDashboardProvider"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/provozovatel/${"stats"}`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToDashboardProvider"] != null &&
                        typeof $steps["goToDashboardProvider"] === "object" &&
                        typeof $steps["goToDashboardProvider"].then ===
                          "function"
                      ) {
                        $steps["goToDashboardProvider"] = await $steps[
                          "goToDashboardProvider"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__yxIzV
                      )}
                    >
                      {"Statistiky"}
                    </h4>
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___7Enl3
                    )}
                    component={Link}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToDashboardProvider"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/provozovatel/${"payment"}`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToDashboardProvider"] != null &&
                        typeof $steps["goToDashboardProvider"] === "object" &&
                        typeof $steps["goToDashboardProvider"].then ===
                          "function"
                      ) {
                        $steps["goToDashboardProvider"] = await $steps[
                          "goToDashboardProvider"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__dDopz
                      )}
                    >
                      {"P\u0159edplatn\u00e9 a platby"}
                    </h4>
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__ltdXo
                    )}
                    component={Link}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToDashboardProvider"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/provozovatel/${"account"}`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToDashboardProvider"] != null &&
                        typeof $steps["goToDashboardProvider"] === "object" &&
                        typeof $steps["goToDashboardProvider"].then ===
                          "function"
                      ) {
                        $steps["goToDashboardProvider"] = await $steps[
                          "goToDashboardProvider"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4___82XFa
                      )}
                    >
                      {"Nastaven\u00ed \u00fa\u010dtu"}
                    </h4>
                  </PlasmicLink__>
                </section>
                <section
                  data-plasmic-name={"body"}
                  data-plasmic-override={overrides.body}
                  className={classNames(projectcss.all, sty.body)}
                >
                  <div
                    data-plasmic-name={"aktivity"}
                    data-plasmic-override={overrides.aktivity}
                    className={classNames(projectcss.all, sty.aktivity)}
                    style={(() => {
                      try {
                        return {
                          gap: "2vh"
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <h3
                      data-plasmic-name={"h3"}
                      data-plasmic-override={overrides.h3}
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3
                      )}
                    >
                      {"Vypl\u0148te pot\u0159ebn\u00e9 \u00fadaje"}
                    </h3>
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.form),
                        extendedOnValuesChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["form", "value"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        onFinish: async values => {
                          const $steps = {};

                          $steps["runActionOnEventRegistration"] = true
                            ? (() => {
                                const actionArgs = {
                                  tplRef: "eventRegistration",
                                  action: "submitEvent"
                                };
                                return (({ tplRef, action, args }) => {
                                  return $refs?.[tplRef]?.[action]?.(
                                    ...(args ?? [])
                                  );
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runActionOnEventRegistration"] != null &&
                            typeof $steps["runActionOnEventRegistration"] ===
                              "object" &&
                            typeof $steps["runActionOnEventRegistration"]
                              .then === "function"
                          ) {
                            $steps["runActionOnEventRegistration"] =
                              await $steps["runActionOnEventRegistration"];
                          }
                        },
                        onIsSubmittingChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["form", "isSubmitting"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        ref: ref => {
                          $refs["form"] = ref;
                        },
                        submitSlot: null,
                        validateTrigger: ["onSubmit"],
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "form.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "form.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"form"}
                          data-plasmic-override={overrides.form}
                          {...child$Props}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__i0SiS
                            )}
                            style={(() => {
                              try {
                                return {
                                  gap: "2vw"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              data-plasmic-name={"left2"}
                              data-plasmic-override={overrides.left2}
                              className={classNames(projectcss.all, sty.left2)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__hy7Sg
                                )}
                                style={(() => {
                                  try {
                                    return {
                                      gap: "2vh"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__o08R
                                  )}
                                >
                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__ncQ72
                                    )}
                                  >
                                    {"N\u00e1zev aktivity:"}
                                  </h4>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__oUaOb
                                    )}
                                    label={"Name"}
                                    noLabel={true}
                                    noStyle={true}
                                    preserve={false}
                                    rules={[
                                      {
                                        ruleType: "required",
                                        message:
                                          "N\u00e1zev je vy\u017eadov\u00e1n"
                                      }
                                    ]}
                                  >
                                    <TextInputWhite
                                      data-plasmic-name={"name"}
                                      data-plasmic-override={overrides.name}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.name
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "name",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={
                                        "nap\u0159.: Divadeln\u00ed ve\u010der & Den um\u011bn\u00ed"
                                      }
                                      required={true}
                                      value={
                                        generateStateValueProp($state, [
                                          "name",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </FormItemWrapper>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___4Xelp
                                  )}
                                >
                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__hgDhv
                                    )}
                                  >
                                    {"Datum kon\u00e1n\u00ed:"}
                                  </h4>
                                  <CustomDatePicker
                                    data-plasmic-name={"date2"}
                                    data-plasmic-override={overrides.date2}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.date2
                                    )}
                                    date={``}
                                    onDateChange={async date => {
                                      const $steps = {};

                                      $steps["updateDate"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["date"]
                                              },
                                              operation: 0,
                                              value: date
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateDate"] != null &&
                                        typeof $steps["updateDate"] ===
                                          "object" &&
                                        typeof $steps["updateDate"].then ===
                                          "function"
                                      ) {
                                        $steps["updateDate"] = await $steps[
                                          "updateDate"
                                        ];
                                      }
                                    }}
                                  />

                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__e92Sr
                                    )}
                                  >
                                    {"Opakov\u00e1n\u00ed:"}
                                  </h4>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__ko4W2
                                    )}
                                    label={"Name"}
                                    name={"repVal"}
                                    noLabel={true}
                                    noStyle={true}
                                    preserve={false}
                                    rules={[]}
                                    trigger={"repVal"}
                                  >
                                    <AntdSelect
                                      data-plasmic-name={"repeat"}
                                      data-plasmic-override={overrides.repeat}
                                      bordered={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.repeat
                                      )}
                                      defaultOpen={false}
                                      defaultStylesClassName={classNames(
                                        projectcss.root_reset,
                                        projectcss.plasmic_default_styles,
                                        projectcss.plasmic_mixins,
                                        projectcss.plasmic_tokens,
                                        plasmic_antd_5_hostless_css.plasmic_tokens,
                                        plasmic_plasmic_rich_components_css.plasmic_tokens
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "repeat",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      optionClassName={classNames({
                                        [sty["pcls_yndSeSKrrKMv"]]: true
                                      })}
                                      options={(() => {
                                        const __composite = [
                                          {
                                            value: null,
                                            label: null,
                                            type: "option"
                                          },
                                          {
                                            value: null,
                                            label: null,
                                            type: "option"
                                          },
                                          {
                                            type: "option",
                                            value: null,
                                            label: null
                                          }
                                        ];
                                        __composite["0"]["value"] = "single";
                                        __composite["0"]["label"] =
                                          "Jednor\u00e1zov\u00e1 ud\u00e1lost";
                                        __composite["1"]["value"] = "weekly";
                                        __composite["1"]["label"] =
                                          "Jednou t\u00fddn\u011b";
                                        __composite["2"]["value"] = "monthly";
                                        __composite["2"]["label"] =
                                          "Jednou m\u011bs\u00ed\u010dn\u011b";
                                        return __composite;
                                      })()}
                                      placeholder={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__l7BcR
                                          )}
                                        >
                                          {"Zvolte mo\u017enost"}
                                        </div>
                                      }
                                      placeholderClassName={classNames({
                                        [sty["pcls_g4-ezvEDOALO"]]: true
                                      })}
                                      popupClassName={classNames({
                                        [sty["pcls_chHMORe8YbKf"]]: true
                                      })}
                                      popupScopeClassName={sty["repeat__popup"]}
                                      showSearch={false}
                                      triggerClassName={classNames({
                                        [sty["pcls_ALWn9frt5ZjS"]]: true
                                      })}
                                      value={generateStateValueProp($state, [
                                        "repeat",
                                        "value"
                                      ])}
                                    />
                                  </FormItemWrapper>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rcrCr
                                  )}
                                >
                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__d5VGd
                                    )}
                                  >
                                    {"Za\u010d\u00e1tek aktivity:"}
                                  </h4>
                                  <TextInputWhite
                                    data-plasmic-name={"startTime"}
                                    data-plasmic-override={overrides.startTime}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.startTime
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "startTime",
                                          "value"
                                        ])(
                                          (e => e.target?.value).apply(
                                            null,
                                            eventArgs
                                          )
                                        );
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    required={true}
                                    type={"time"}
                                    value={
                                      generateStateValueProp($state, [
                                        "startTime",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />

                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__ulSwh
                                    )}
                                  >
                                    {"Doba trv\u00e1n\u00ed:"}
                                  </h4>
                                  <TextInputWhite
                                    data-plasmic-name={"duration"}
                                    data-plasmic-override={overrides.duration}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.duration
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "duration",
                                          "value"
                                        ])(
                                          (e => e.target?.value).apply(
                                            null,
                                            eventArgs
                                          )
                                        );
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={"v minut\u00e1ch"}
                                    required={true}
                                    type={"number"}
                                    value={
                                      generateStateValueProp($state, [
                                        "duration",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__pJcmt
                                  )}
                                >
                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__x1RvW
                                    )}
                                  >
                                    {"Po\u010det osob"}
                                  </h4>
                                  <TextInputWhite
                                    data-plasmic-name={"capacity"}
                                    data-plasmic-override={overrides.capacity}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.capacity
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "capacity",
                                          "value"
                                        ])(
                                          (e => e.target?.value).apply(
                                            null,
                                            eventArgs
                                          )
                                        );
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={"maxim\u00e1ln\u00ed kapacita"}
                                    required={true}
                                    type={"number"}
                                    value={
                                      generateStateValueProp($state, [
                                        "capacity",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />

                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__hm4RY
                                    )}
                                  >
                                    {"Cena:"}
                                  </h4>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__g1NvT
                                    )}
                                    label={"Name"}
                                    name={"priVal"}
                                    noLabel={true}
                                    noStyle={true}
                                    preserve={false}
                                    trigger={"priVal"}
                                  >
                                    <AntdSelect
                                      data-plasmic-name={"priceSelect"}
                                      data-plasmic-override={
                                        overrides.priceSelect
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.priceSelect
                                      )}
                                      defaultStylesClassName={classNames(
                                        projectcss.root_reset,
                                        projectcss.plasmic_default_styles,
                                        projectcss.plasmic_mixins,
                                        projectcss.plasmic_tokens,
                                        plasmic_antd_5_hostless_css.plasmic_tokens,
                                        plasmic_plasmic_rich_components_css.plasmic_tokens
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "priceSelect",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      optionClassName={classNames({
                                        [sty["pcls_B4O13RhhcRou"]]: true
                                      })}
                                      options={(() => {
                                        const __composite = [
                                          {
                                            value: null,
                                            label: null,
                                            type: "option"
                                          },
                                          {
                                            value: null,
                                            label: null,
                                            type: "option"
                                          }
                                        ];
                                        __composite["0"]["value"] = "free";
                                        __composite["0"]["label"] = "Zdarma";
                                        __composite["1"]["value"] = "price";
                                        __composite["1"]["label"] =
                                          "Stanovit cenu";
                                        return __composite;
                                      })()}
                                      placeholder={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__ufWeo
                                          )}
                                        >
                                          {"Zvolte mo\u017enost"}
                                        </div>
                                      }
                                      placeholderClassName={classNames({
                                        [sty["pcls_xyyLt-lVxNvb"]]: true
                                      })}
                                      popupClassName={classNames({
                                        [sty["pcls_sdxbIgazF3wN"]]: true
                                      })}
                                      popupScopeClassName={
                                        sty["priceSelect__popup"]
                                      }
                                      triggerClassName={classNames({
                                        [sty["pcls_UCyqwyGTnkCv"]]: true
                                      })}
                                      value={generateStateValueProp($state, [
                                        "priceSelect",
                                        "value"
                                      ])}
                                    />
                                  </FormItemWrapper>
                                </div>
                                {(() => {
                                  try {
                                    return $state.priceSelect.value === "price"
                                      ? true
                                      : false;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__eNkdi
                                    )}
                                  >
                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4___6Cn9U
                                      )}
                                    >
                                      {"Stanovte cenu"}
                                    </h4>
                                    <TextInputWhite
                                      data-plasmic-name={"setPrice"}
                                      data-plasmic-override={overrides.setPrice}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.setPrice
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "setPrice",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={"zadejte cenu v K\u010d"}
                                      type={"number"}
                                      value={
                                        generateStateValueProp($state, [
                                          "setPrice",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                ) : null}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___6NNW
                                  )}
                                >
                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__jkEnU
                                    )}
                                  >
                                    {"Dostupnost"}
                                  </h4>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__l0CyA
                                    )}
                                  >
                                    <AntdCheckbox
                                      data-plasmic-name={"checkbox"}
                                      data-plasmic-override={overrides.checkbox}
                                      checked={generateStateValueProp($state, [
                                        "checkbox",
                                        "checked"
                                      ])}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.checkbox
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "checkbox",
                                          "checked"
                                        ]).apply(null, eventArgs);
                                      }}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___576
                                        )}
                                      >
                                        {"vhodn\u00e9 pro OZP"}
                                      </div>
                                    </AntdCheckbox>
                                    <AntdCheckbox
                                      data-plasmic-name={"checkbox2"}
                                      data-plasmic-override={
                                        overrides.checkbox2
                                      }
                                      checked={generateStateValueProp($state, [
                                        "checkbox2",
                                        "checked"
                                      ])}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.checkbox2
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "checkbox2",
                                          "checked"
                                        ]).apply(null, eventArgs);
                                      }}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__yL2Ey
                                        )}
                                      >
                                        {"pro d\u011bti"}
                                      </div>
                                    </AntdCheckbox>
                                    <AntdCheckbox
                                      data-plasmic-name={"checkbox3"}
                                      data-plasmic-override={
                                        overrides.checkbox3
                                      }
                                      checked={generateStateValueProp($state, [
                                        "checkbox3",
                                        "checked"
                                      ])}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.checkbox3
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "checkbox3",
                                          "checked"
                                        ]).apply(null, eventArgs);
                                      }}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__gl5E5
                                        )}
                                      >
                                        {"option 1"}
                                      </div>
                                    </AntdCheckbox>
                                    <AntdCheckbox
                                      data-plasmic-name={"checkbox4"}
                                      data-plasmic-override={
                                        overrides.checkbox4
                                      }
                                      checked={generateStateValueProp($state, [
                                        "checkbox4",
                                        "checked"
                                      ])}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.checkbox4
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "checkbox4",
                                          "checked"
                                        ]).apply(null, eventArgs);
                                      }}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___9TDyd
                                        )}
                                      >
                                        {"option 2"}
                                      </div>
                                    </AntdCheckbox>
                                    <AntdCheckbox
                                      data-plasmic-name={"checkbox5"}
                                      data-plasmic-override={
                                        overrides.checkbox5
                                      }
                                      checked={generateStateValueProp($state, [
                                        "checkbox5",
                                        "checked"
                                      ])}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.checkbox5
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "checkbox5",
                                          "checked"
                                        ]).apply(null, eventArgs);
                                      }}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__uegqg
                                        )}
                                      >
                                        {"option 3"}
                                      </div>
                                    </AntdCheckbox>
                                    <AntdCheckbox
                                      data-plasmic-name={"checkbox6"}
                                      data-plasmic-override={
                                        overrides.checkbox6
                                      }
                                      checked={generateStateValueProp($state, [
                                        "checkbox6",
                                        "checked"
                                      ])}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.checkbox6
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "checkbox6",
                                          "checked"
                                        ]).apply(null, eventArgs);
                                      }}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__lHXkV
                                        )}
                                      >
                                        {"option 4"}
                                      </div>
                                    </AntdCheckbox>
                                    <AntdCheckbox
                                      data-plasmic-name={"checkbox7"}
                                      data-plasmic-override={
                                        overrides.checkbox7
                                      }
                                      checked={generateStateValueProp($state, [
                                        "checkbox7",
                                        "checked"
                                      ])}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.checkbox7
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "checkbox7",
                                          "checked"
                                        ]).apply(null, eventArgs);
                                      }}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__n0B4
                                        )}
                                      >
                                        {"option 5"}
                                      </div>
                                    </AntdCheckbox>
                                    <AntdCheckbox
                                      data-plasmic-name={"checkbox8"}
                                      data-plasmic-override={
                                        overrides.checkbox8
                                      }
                                      checked={generateStateValueProp($state, [
                                        "checkbox8",
                                        "checked"
                                      ])}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.checkbox8
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "checkbox8",
                                          "checked"
                                        ]).apply(null, eventArgs);
                                      }}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__scIl
                                        )}
                                      >
                                        {"option 6"}
                                      </div>
                                    </AntdCheckbox>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__hqEo
                                  )}
                                >
                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__u2IpU
                                    )}
                                  >
                                    {"M\u00edsto kon\u00e1n\u00ed:"}
                                  </h4>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__tj1E3
                                  )}
                                >
                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4___8ORtC
                                    )}
                                  >
                                    {"Ulice"}
                                  </h4>
                                  <TextInputWhite
                                    data-plasmic-name={"street"}
                                    data-plasmic-override={overrides.street}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.street
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "street",
                                          "value"
                                        ])(
                                          (e => e.target?.value).apply(
                                            null,
                                            eventArgs
                                          )
                                        );
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    required={true}
                                    type={"text"}
                                    value={
                                      generateStateValueProp($state, [
                                        "street",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___34TfF
                                  )}
                                >
                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__gNg6P
                                    )}
                                  >
                                    {"M\u011bsto"}
                                  </h4>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__rZzTy
                                    )}
                                    label={"Name"}
                                    name={"citVal"}
                                    noLabel={true}
                                    noStyle={true}
                                    trigger={"citVal"}
                                  >
                                    <AntdSelect
                                      data-plasmic-name={"citySelect"}
                                      data-plasmic-override={
                                        overrides.citySelect
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.citySelect
                                      )}
                                      defaultStylesClassName={classNames(
                                        projectcss.root_reset,
                                        projectcss.plasmic_default_styles,
                                        projectcss.plasmic_mixins,
                                        projectcss.plasmic_tokens,
                                        plasmic_antd_5_hostless_css.plasmic_tokens,
                                        plasmic_plasmic_rich_components_css.plasmic_tokens
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "citySelect",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      optionClassName={classNames({
                                        [sty["pcls_8XMsUL7fWovD"]]: true
                                      })}
                                      options={(() => {
                                        const __composite = [
                                          {
                                            value: null,
                                            label: null,
                                            type: "option"
                                          },
                                          {
                                            value: null,
                                            label: null,
                                            type: "option"
                                          },
                                          {
                                            type: "option",
                                            value: null,
                                            label: null
                                          },
                                          {
                                            type: "option",
                                            value: null,
                                            label: null
                                          },
                                          {
                                            type: "option",
                                            value: null,
                                            label: null
                                          }
                                        ];
                                        __composite["0"]["value"] =
                                          "Hav\u00ed\u0159ov";
                                        __composite["0"]["label"] =
                                          "Hav\u00ed\u0159ov";
                                        __composite["1"]["value"] =
                                          "T\u011brlicko";
                                        __composite["1"]["label"] =
                                          "T\u011brlicko";
                                        __composite["2"]["value"] =
                                          "Doln\u00ed Such\u00e1";
                                        __composite["2"]["label"] =
                                          "Doln\u00ed Such\u00e1";
                                        __composite["3"]["value"] =
                                          "St\u0159edn\u00ed Such\u00e1";
                                        __composite["3"]["label"] =
                                          "St\u0159edn\u00ed Such\u00e1";
                                        __composite["4"]["value"] =
                                          "Horn\u00ed Such\u00e1";
                                        __composite["4"]["label"] =
                                          "Horn\u00ed Such\u00e1";
                                        return __composite;
                                      })()}
                                      placeholder={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__cdRbw
                                          )}
                                        >
                                          {"Vyberte m\u011bsto"}
                                        </div>
                                      }
                                      placeholderClassName={classNames({
                                        [sty["pcls_GHAPd-PUEpDc"]]: true
                                      })}
                                      popupClassName={classNames({
                                        [sty["pcls_zt5n6awvn-rc"]]: true
                                      })}
                                      popupScopeClassName={
                                        sty["citySelect__popup"]
                                      }
                                      triggerClassName={classNames({
                                        [sty["pcls_qdQVZ21tRqEO"]]: true
                                      })}
                                      value={generateStateValueProp($state, [
                                        "citySelect",
                                        "value"
                                      ])}
                                    />
                                  </FormItemWrapper>
                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__xFo6W
                                    )}
                                  >
                                    {"\u010d.pop./\u010d.ori."}
                                  </h4>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__tj97Y
                                    )}
                                  >
                                    <TextInputWhite
                                      data-plasmic-name={"adPop"}
                                      data-plasmic-override={overrides.adPop}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.adPop
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "adPop",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      required={true}
                                      type={"text"}
                                      value={
                                        generateStateValueProp($state, [
                                          "adPop",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />

                                    <h4
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h4,
                                        projectcss.__wab_text,
                                        sty.h4__hwyJt
                                      )}
                                    >
                                      {" / "}
                                    </h4>
                                    <TextInputWhite
                                      data-plasmic-name={"adOr"}
                                      data-plasmic-override={overrides.adOr}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.adOr
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "adOr",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      required={true}
                                      type={"text"}
                                      value={
                                        generateStateValueProp($state, [
                                          "adOr",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__qSmQ
                                  )}
                                >
                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__rFtmQ
                                    )}
                                  >
                                    {"Kategorie"}
                                  </h4>
                                  <FormItemWrapper
                                    data-plasmic-name={"category"}
                                    data-plasmic-override={overrides.category}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.category
                                    )}
                                    label={"Name"}
                                    name={"catVal"}
                                    noLabel={true}
                                    noStyle={true}
                                    trigger={"catVal"}
                                  >
                                    <AntdSelect
                                      data-plasmic-name={"categorySelect"}
                                      data-plasmic-override={
                                        overrides.categorySelect
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.categorySelect
                                      )}
                                      defaultStylesClassName={classNames(
                                        projectcss.root_reset,
                                        projectcss.plasmic_default_styles,
                                        projectcss.plasmic_mixins,
                                        projectcss.plasmic_tokens,
                                        plasmic_antd_5_hostless_css.plasmic_tokens,
                                        plasmic_plasmic_rich_components_css.plasmic_tokens
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "categorySelect",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      optionClassName={classNames({
                                        [sty["pcls_sPmUl69vBjx2"]]: true
                                      })}
                                      options={(() => {
                                        try {
                                          return (() => {
                                            const options = JSON.parse(
                                              localStorage.getItem("queryCache")
                                            ).category.map(item => ({
                                              value: item.webURL,
                                              label: item.name
                                            }));
                                            return options;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()}
                                      placeholder={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__ituDl
                                          )}
                                        >
                                          {"Zvolte kategorii"}
                                        </div>
                                      }
                                      placeholderClassName={classNames({
                                        [sty["pcls_9GNrQuPx5-oy"]]: true
                                      })}
                                      popupClassName={classNames({
                                        [sty["pcls_Cl9XO9_bTbqo"]]: true
                                      })}
                                      popupScopeClassName={
                                        sty["categorySelect__popup"]
                                      }
                                      triggerClassName={classNames({
                                        [sty["pcls_GoIILex9-Vwr"]]: true
                                      })}
                                      value={generateStateValueProp($state, [
                                        "categorySelect",
                                        "value"
                                      ])}
                                    />
                                  </FormItemWrapper>
                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__upTqL
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.subCategorySelect.value;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Zam\u011b\u0159en\u00ed";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </h4>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__sKe0W
                                    )}
                                    label={"Name"}
                                    name={"subVal"}
                                    noLabel={true}
                                    noStyle={true}
                                    trigger={"subVal"}
                                  >
                                    <AntdSelect
                                      data-plasmic-name={"subCategorySelect"}
                                      data-plasmic-override={
                                        overrides.subCategorySelect
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.subCategorySelect
                                      )}
                                      defaultStylesClassName={classNames(
                                        projectcss.root_reset,
                                        projectcss.plasmic_default_styles,
                                        projectcss.plasmic_mixins,
                                        projectcss.plasmic_tokens,
                                        plasmic_antd_5_hostless_css.plasmic_tokens,
                                        plasmic_plasmic_rich_components_css.plasmic_tokens
                                      )}
                                      disabled={(() => {
                                        try {
                                          return (
                                            !$state.categorySelect.value ||
                                            $state.categorySelect.value ===
                                              null ||
                                            $state.categorySelect.value === ""
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "subCategorySelect",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      optionClassName={classNames({
                                        [sty["pcls_xym4bZ9WnN3f"]]: true
                                      })}
                                      options={(() => {
                                        try {
                                          return (() => {
                                            const selectedCategory = JSON.parse(
                                              localStorage.getItem("queryCache")
                                            ).category.find(
                                              item =>
                                                item.webURL ===
                                                $state.categorySelect.value
                                            );
                                            const options = selectedCategory
                                              ? selectedCategory.subCategory.map(
                                                  sub => ({
                                                    value: sub,
                                                    label: sub
                                                  })
                                                )
                                              : [];
                                            return options;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()}
                                      placeholder={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__c1DDm
                                          )}
                                        >
                                          {"Vyberte zam\u011b\u0159en\u00ed"}
                                        </div>
                                      }
                                      placeholderClassName={classNames({
                                        [sty["pcls_FGM3HlW3snox"]]: true
                                      })}
                                      popupClassName={classNames({
                                        [sty["pcls_Qw1JrP4ytkQc"]]: true
                                      })}
                                      popupScopeClassName={
                                        sty["subCategorySelect__popup"]
                                      }
                                      triggerClassName={classNames({
                                        [sty["pcls_QgC3k4IyEYuc"]]: true
                                      })}
                                      value={generateStateValueProp($state, [
                                        "subCategorySelect",
                                        "value"
                                      ])}
                                    />
                                  </FormItemWrapper>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__eR4VE
                                  )}
                                >
                                  <h4
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h4,
                                      projectcss.__wab_text,
                                      sty.h4__dlqup
                                    )}
                                  >
                                    {"Popis aktivity:"}
                                  </h4>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__xro5K
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__xxosx
                                        )}
                                      >
                                        {"Label"}
                                      </div>
                                    }
                                    name={"desVal"}
                                    noLabel={true}
                                    noStyle={true}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        autoSize: true,
                                        className: classNames(
                                          "__wab_instance",
                                          sty.textArea
                                        ),
                                        onChange: async (...eventArgs: any) => {
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["textArea", "value"],
                                            AntdTextArea_Helpers
                                          ).apply(null, eventArgs);
                                        },
                                        value: generateStateValueProp($state, [
                                          "textArea",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName: "textArea.value"
                                          }
                                        ],
                                        [],
                                        AntdTextArea_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <AntdTextArea
                                          data-plasmic-name={"textArea"}
                                          data-plasmic-override={
                                            overrides.textArea
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </FormItemWrapper>
                                </div>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"right"}
                              data-plasmic-override={overrides.right}
                              className={classNames(projectcss.all, sty.right)}
                              style={(() => {
                                try {
                                  return {
                                    gap: "1vh"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__gzrYo
                                )}
                              >
                                <h4
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h4,
                                    projectcss.__wab_text,
                                    sty.h4__nErA5
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return undefined;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Nahrajte \u00favodn\u00ed fotku ud\u00e1losti";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h4>
                              </div>
                              <section
                                className={classNames(
                                  projectcss.all,
                                  sty.section__e0B1X
                                )}
                              >
                                <UploadWrapper
                                  data-plasmic-name={"upload"}
                                  data-plasmic-override={overrides.upload}
                                  accept={"image/*"}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.upload
                                  )}
                                  files={generateStateValueProp($state, [
                                    "upload",
                                    "files"
                                  ])}
                                  listType={"picture"}
                                  onFilesChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "upload",
                                      "files"
                                    ]).apply(null, eventArgs);
                                  }}
                                  showUploadList={false}
                                >
                                  <AntdButton
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__neiOu
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__ikl2X
                                      )}
                                    >
                                      {"Nahrajte \u00favodn\u00ed fotku"}
                                    </div>
                                  </AntdButton>
                                </UploadWrapper>
                                {(() => {
                                  try {
                                    return (
                                      $state.upload.files &&
                                      $state.upload.files.length > 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__g15Uq)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"auto"}
                                    loading={"lazy"}
                                    src={(() => {
                                      try {
                                        return `data:image/jpeg;base64,${$state.upload.files[0].contents}`;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                ) : null}
                                {(() => {
                                  try {
                                    return (
                                      $state.upload.files &&
                                      $state.upload.files.length > 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <AntdButton
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__iggPo
                                    )}
                                    onClick={async () => {
                                      const $steps = {};

                                      $steps["updateUploadFiles"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "upload",
                                                  "files"
                                                ]
                                              },
                                              operation: 1
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                undefined
                                              );
                                              return undefined;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateUploadFiles"] != null &&
                                        typeof $steps["updateUploadFiles"] ===
                                          "object" &&
                                        typeof $steps["updateUploadFiles"]
                                          .then === "function"
                                      ) {
                                        $steps["updateUploadFiles"] =
                                          await $steps["updateUploadFiles"];
                                      }
                                    }}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__ygFD
                                      )}
                                    >
                                      {"Smazat"}
                                    </div>
                                  </AntdButton>
                                ) : null}
                              </section>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__p3Sqh
                                )}
                              >
                                <h4
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h4,
                                    projectcss.__wab_text,
                                    sty.h4__gzSwm
                                  )}
                                >
                                  {
                                    "P\u0159idejte fotografie do galerie (max. 8 fotek)"
                                  }
                                </h4>
                              </div>
                              <UploadWrapper
                                data-plasmic-name={"upload2"}
                                data-plasmic-override={overrides.upload2}
                                accept={"image/*"}
                                className={classNames(
                                  "__wab_instance",
                                  sty.upload2
                                )}
                                files={generateStateValueProp($state, [
                                  "upload2",
                                  "files"
                                ])}
                                listType={"picture"}
                                maxCount={8}
                                multiple={true}
                                onFilesChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "upload2",
                                    "files"
                                  ]).apply(null, eventArgs);
                                }}
                                showUploadList={false}
                              >
                                <AntdButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button___7WSX
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__sWzKq
                                    )}
                                  >
                                    {"Nahrajte fotky"}
                                  </div>
                                </AntdButton>
                              </UploadWrapper>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__jWS7
                                )}
                                style={(() => {
                                  try {
                                    return {
                                      columnGap: "1vw",
                                      rowGap: "1vh"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.upload2.files;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentImage = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <PlasmicLink__
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.a,
                                        sty.link__w7Xpf
                                      )}
                                      component={Link}
                                      key={currentIndex}
                                      platform={"nextjs"}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__vugig)}
                                        displayHeight={"auto"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"none"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"100%"}
                                        height={``}
                                        loading={"lazy"}
                                        src={(() => {
                                          try {
                                            return `data:image/jpeg;base64,${currentImage.contents}`;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        width={``}
                                      />

                                      <AntdButton
                                        className={classNames(
                                          "__wab_instance",
                                          sty.button__awQit
                                        )}
                                        onClick={async () => {
                                          const $steps = {};

                                          $steps["updateUpload2Files"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "upload2",
                                                      "files"
                                                    ]
                                                  },
                                                  operation: 6,
                                                  deleteCount: 1,
                                                  startIndex: (() => {
                                                    try {
                                                      return currentIndex;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  const arr = $stateGet(
                                                    objRoot,
                                                    variablePath
                                                  );
                                                  arr.splice(
                                                    startIndex,
                                                    deleteCount
                                                  );
                                                  return arr;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateUpload2Files"] !=
                                              null &&
                                            typeof $steps[
                                              "updateUpload2Files"
                                            ] === "object" &&
                                            typeof $steps["updateUpload2Files"]
                                              .then === "function"
                                          ) {
                                            $steps["updateUpload2Files"] =
                                              await $steps[
                                                "updateUpload2Files"
                                              ];
                                          }
                                        }}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__hNbBb
                                          )}
                                        >
                                          {"Smazat"}
                                        </div>
                                      </AntdButton>
                                    </PlasmicLink__>
                                  );
                                })}
                              </div>
                            </div>
                          </div>
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__dyyqE
                            )}
                            onClick={async () => {
                              const $steps = {};
                            }}
                            submitsForm={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___1DEvX
                              )}
                            >
                              {"P\u0159idat novou ud\u00e1lost"}
                            </div>
                          </AntdButton>
                        </FormWrapper>
                      );
                    })()}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xPpAq
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.categorySelect.value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__owaYq
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.subCategorySelect.value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b7K8
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.capacity.value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wuEVh
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.duration.value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </section>
              </div>
            </main>
          </section>
          <EventRegistration
            data-plasmic-name={"eventRegistration"}
            data-plasmic-override={overrides.eventRegistration}
            adress={(() => {
              try {
                return (() => {
                  let fullAddress = `${$state.street.value} ${$state.adPop.value}/${$state.adOr.value}, ${$state.citySelect.value}`;
                  return fullAddress;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            category={(() => {
              try {
                return (() => {
                  const filteredItem = JSON.parse(
                    localStorage.getItem("queryCache")
                  ).category.find(
                    item => item.webURL === $state.categorySelect.value
                  );
                  const webURL = filteredItem ? filteredItem.name : null;
                  return webURL;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.eventRegistration)}
            created_at={(() => {
              try {
                return (() => {
                  return ($state.currentTime = new Date().toISOString());
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            date={(() => {
              try {
                return $state.date;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            duration={(() => {
              try {
                return parseInt($state.duration.value);
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            gallery={(() => {
              try {
                return $state.upload2.files.map(file => file.contents);
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            howMany={(() => {
              try {
                return parseInt($state.capacity.value);
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            isPeriodic={false}
            mainImage={(() => {
              try {
                return $state.upload.files[0].contents;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            name={(() => {
              try {
                return $state.name.value;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            price={(() => {
              try {
                return $state.priceSelect.value === "Zdarma"
                  ? 0
                  : $state.setPrice.value;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            provider={(() => {
              try {
                return $ctx.userData.providerName;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            ref={ref => {
              $refs["eventRegistration"] = ref;
            }}
            subCategory={(() => {
              try {
                return (() => {
                  const result = [$state.subCategorySelect.value];
                  return result;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            time={(() => {
              try {
                return (() => {
                  const timeWithSeconds = `${$state.startTime.value}:00`;
                  return timeWithSeconds;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            webUrl={(() => {
              try {
                return (() => {
                  const name =
                    typeof $state.name.value === "string"
                      ? $state.name.value.replace(/\s+/g, "-").toLowerCase()
                      : "";
                  const randomString = Math.random().toString(36).substr(2, 8); // Ensures it always has 8 characters
                  return `${name}-${randomString}`;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "main",
    "testButton",
    "dashboard",
    "body",
    "aktivity",
    "h3",
    "form",
    "left2",
    "name",
    "date2",
    "repeat",
    "startTime",
    "duration",
    "capacity",
    "priceSelect",
    "setPrice",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "checkbox5",
    "checkbox6",
    "checkbox7",
    "checkbox8",
    "street",
    "citySelect",
    "adPop",
    "adOr",
    "category",
    "categorySelect",
    "subCategorySelect",
    "textArea",
    "right",
    "upload",
    "upload2",
    "eventRegistration"
  ],
  header: ["header"],
  main: [
    "main",
    "testButton",
    "dashboard",
    "body",
    "aktivity",
    "h3",
    "form",
    "left2",
    "name",
    "date2",
    "repeat",
    "startTime",
    "duration",
    "capacity",
    "priceSelect",
    "setPrice",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "checkbox5",
    "checkbox6",
    "checkbox7",
    "checkbox8",
    "street",
    "citySelect",
    "adPop",
    "adOr",
    "category",
    "categorySelect",
    "subCategorySelect",
    "textArea",
    "right",
    "upload",
    "upload2"
  ],
  testButton: ["testButton"],
  dashboard: ["dashboard"],
  body: [
    "body",
    "aktivity",
    "h3",
    "form",
    "left2",
    "name",
    "date2",
    "repeat",
    "startTime",
    "duration",
    "capacity",
    "priceSelect",
    "setPrice",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "checkbox5",
    "checkbox6",
    "checkbox7",
    "checkbox8",
    "street",
    "citySelect",
    "adPop",
    "adOr",
    "category",
    "categorySelect",
    "subCategorySelect",
    "textArea",
    "right",
    "upload",
    "upload2"
  ],
  aktivity: [
    "aktivity",
    "h3",
    "form",
    "left2",
    "name",
    "date2",
    "repeat",
    "startTime",
    "duration",
    "capacity",
    "priceSelect",
    "setPrice",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "checkbox5",
    "checkbox6",
    "checkbox7",
    "checkbox8",
    "street",
    "citySelect",
    "adPop",
    "adOr",
    "category",
    "categorySelect",
    "subCategorySelect",
    "textArea",
    "right",
    "upload",
    "upload2"
  ],
  h3: ["h3"],
  form: [
    "form",
    "left2",
    "name",
    "date2",
    "repeat",
    "startTime",
    "duration",
    "capacity",
    "priceSelect",
    "setPrice",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "checkbox5",
    "checkbox6",
    "checkbox7",
    "checkbox8",
    "street",
    "citySelect",
    "adPop",
    "adOr",
    "category",
    "categorySelect",
    "subCategorySelect",
    "textArea",
    "right",
    "upload",
    "upload2"
  ],
  left2: [
    "left2",
    "name",
    "date2",
    "repeat",
    "startTime",
    "duration",
    "capacity",
    "priceSelect",
    "setPrice",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "checkbox5",
    "checkbox6",
    "checkbox7",
    "checkbox8",
    "street",
    "citySelect",
    "adPop",
    "adOr",
    "category",
    "categorySelect",
    "subCategorySelect",
    "textArea"
  ],
  name: ["name"],
  date2: ["date2"],
  repeat: ["repeat"],
  startTime: ["startTime"],
  duration: ["duration"],
  capacity: ["capacity"],
  priceSelect: ["priceSelect"],
  setPrice: ["setPrice"],
  checkbox: ["checkbox"],
  checkbox2: ["checkbox2"],
  checkbox3: ["checkbox3"],
  checkbox4: ["checkbox4"],
  checkbox5: ["checkbox5"],
  checkbox6: ["checkbox6"],
  checkbox7: ["checkbox7"],
  checkbox8: ["checkbox8"],
  street: ["street"],
  citySelect: ["citySelect"],
  adPop: ["adPop"],
  adOr: ["adOr"],
  category: ["category", "categorySelect"],
  categorySelect: ["categorySelect"],
  subCategorySelect: ["subCategorySelect"],
  textArea: ["textArea"],
  right: ["right", "upload", "upload2"],
  upload: ["upload"],
  upload2: ["upload2"],
  eventRegistration: ["eventRegistration"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  main: "main";
  testButton: typeof TestButton;
  dashboard: "section";
  body: "section";
  aktivity: "div";
  h3: "h3";
  form: typeof FormWrapper;
  left2: "div";
  name: typeof TextInputWhite;
  date2: typeof CustomDatePicker;
  repeat: typeof AntdSelect;
  startTime: typeof TextInputWhite;
  duration: typeof TextInputWhite;
  capacity: typeof TextInputWhite;
  priceSelect: typeof AntdSelect;
  setPrice: typeof TextInputWhite;
  checkbox: typeof AntdCheckbox;
  checkbox2: typeof AntdCheckbox;
  checkbox3: typeof AntdCheckbox;
  checkbox4: typeof AntdCheckbox;
  checkbox5: typeof AntdCheckbox;
  checkbox6: typeof AntdCheckbox;
  checkbox7: typeof AntdCheckbox;
  checkbox8: typeof AntdCheckbox;
  street: typeof TextInputWhite;
  citySelect: typeof AntdSelect;
  adPop: typeof TextInputWhite;
  adOr: typeof TextInputWhite;
  category: typeof FormItemWrapper;
  categorySelect: typeof AntdSelect;
  subCategorySelect: typeof AntdSelect;
  textArea: typeof AntdTextArea;
  right: "div";
  upload: typeof UploadWrapper;
  upload2: typeof UploadWrapper;
  eventRegistration: typeof EventRegistration;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDashboardProviderNewEvent3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDashboardProviderNewEvent3__VariantsArgs;
    args?: PlasmicDashboardProviderNewEvent3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDashboardProviderNewEvent3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDashboardProviderNewEvent3__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDashboardProviderNewEvent3__ArgProps,
          internalVariantPropNames:
            PlasmicDashboardProviderNewEvent3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDashboardProviderNewEvent3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboardProviderNewEvent3";
  } else {
    func.displayName = `PlasmicDashboardProviderNewEvent3.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboardProviderNewEvent3 = Object.assign(
  // Top-level PlasmicDashboardProviderNewEvent3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    main: makeNodeComponent("main"),
    testButton: makeNodeComponent("testButton"),
    dashboard: makeNodeComponent("dashboard"),
    body: makeNodeComponent("body"),
    aktivity: makeNodeComponent("aktivity"),
    h3: makeNodeComponent("h3"),
    form: makeNodeComponent("form"),
    left2: makeNodeComponent("left2"),
    _name: makeNodeComponent("name"),
    date2: makeNodeComponent("date2"),
    repeat: makeNodeComponent("repeat"),
    startTime: makeNodeComponent("startTime"),
    duration: makeNodeComponent("duration"),
    capacity: makeNodeComponent("capacity"),
    priceSelect: makeNodeComponent("priceSelect"),
    setPrice: makeNodeComponent("setPrice"),
    checkbox: makeNodeComponent("checkbox"),
    checkbox2: makeNodeComponent("checkbox2"),
    checkbox3: makeNodeComponent("checkbox3"),
    checkbox4: makeNodeComponent("checkbox4"),
    checkbox5: makeNodeComponent("checkbox5"),
    checkbox6: makeNodeComponent("checkbox6"),
    checkbox7: makeNodeComponent("checkbox7"),
    checkbox8: makeNodeComponent("checkbox8"),
    street: makeNodeComponent("street"),
    citySelect: makeNodeComponent("citySelect"),
    adPop: makeNodeComponent("adPop"),
    adOr: makeNodeComponent("adOr"),
    category: makeNodeComponent("category"),
    categorySelect: makeNodeComponent("categorySelect"),
    subCategorySelect: makeNodeComponent("subCategorySelect"),
    textArea: makeNodeComponent("textArea"),
    right: makeNodeComponent("right"),
    upload: makeNodeComponent("upload"),
    upload2: makeNodeComponent("upload2"),
    eventRegistration: makeNodeComponent("eventRegistration"),

    // Metadata about props expected for PlasmicDashboardProviderNewEvent3
    internalVariantProps: PlasmicDashboardProviderNewEvent3__VariantProps,
    internalArgProps: PlasmicDashboardProviderNewEvent3__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Nastavení nové aktivity",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDashboardProviderNewEvent3;
/* prettier-ignore-end */
