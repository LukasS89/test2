// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7YxWRrh3dN23tQ7PqjX2hp
// Component: Q1Y3RpVDuk0W

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: uZX7p1wyVbCa/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { RegisterProvider } from "@components/RegisterProvider"; // plasmic-import: qqhDlSj0JW_P/codeComponent
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInput from "../../TextInput"; // plasmic-import: 07htI-B8VH1o/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7YxWRrh3dN23tQ7PqjX2hp/projectcss
import sty from "./PlasmicRegistrationProvider.module.css"; // plasmic-import: Q1Y3RpVDuk0W/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: JoOaxx2eTHjW/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: JT75l_Xzekjr/icon

createPlasmicElementProxy;

export type PlasmicRegistrationProvider__VariantMembers = {};
export type PlasmicRegistrationProvider__VariantsArgs = {};
type VariantPropType = keyof PlasmicRegistrationProvider__VariantsArgs;
export const PlasmicRegistrationProvider__VariantProps =
  new Array<VariantPropType>();

export type PlasmicRegistrationProvider__ArgsType = {};
type ArgPropType = keyof PlasmicRegistrationProvider__ArgsType;
export const PlasmicRegistrationProvider__ArgProps = new Array<ArgPropType>();

export type PlasmicRegistrationProvider__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  header?: Flex__<typeof Header>;
  main?: Flex__<"main">;
  left?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  right?: Flex__<"div">;
  form3?: Flex__<typeof FormWrapper>;
  textInput?: Flex__<typeof TextInput>;
  textInput2?: Flex__<typeof TextInput>;
  textInput3?: Flex__<typeof TextInput>;
  textInput4?: Flex__<typeof TextInput>;
  textInput5?: Flex__<typeof TextInput>;
  textInput6?: Flex__<typeof TextInput>;
  textInput7?: Flex__<typeof TextInput>;
  textInput8?: Flex__<typeof TextInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  loginButton3?: Flex__<typeof AntdButton>;
  button?: Flex__<typeof AntdButton>;
  registerProvider?: Flex__<typeof RegisterProvider>;
};

export interface DefaultRegistrationProviderProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRegistrationProvider__RenderFunc(props: {
  variants: PlasmicRegistrationProvider__VariantsArgs;
  args: PlasmicRegistrationProvider__ArgsType;
  overrides: PlasmicRegistrationProvider__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form3.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form3",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form3.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form3",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "isRegistered",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <main
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              className={classNames(projectcss.all, sty.main)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__jlwn3)}>
                <div
                  data-plasmic-name={"left"}
                  data-plasmic-override={overrides.left}
                  className={classNames(projectcss.all, sty.left)}
                >
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"92vh"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"eager"}
                    src={(() => {
                      try {
                        return "https://rnrfdxtsdvmxhjsoqoid.supabase.co/storage/v1/object/public/assets/registration.webp";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "https://rnrfdxtsdvmxhjsoqoid.supabase.co/storage/v1/object/public/assets/registration.webp";
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
                <div
                  data-plasmic-name={"right"}
                  data-plasmic-override={overrides.right}
                  className={classNames(projectcss.all, sty.right)}
                  style={(() => {
                    try {
                      return {
                        gap: "3vh"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  {(() => {
                    try {
                      return !$state.isRegistered;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qt6Lj)}
                    >
                      {(() => {
                        const child$Props = {
                          autoDisableWhileSubmitting: true,
                          className: classNames("__wab_instance", sty.form3),
                          extendedOnValuesChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["form3", "value"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          formItems: [
                            { label: "Name", name: "name", inputType: "Text" },
                            {
                              label: "Message",
                              name: "message",
                              inputType: "Text Area"
                            }
                          ],
                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: "advanced",
                          onFinish: async values => {
                            const $steps = {};

                            $steps["runActionOnRegisterProvider"] =
                              $state.form3.value.password ===
                              $state.form3.value.passCheck
                                ? (() => {
                                    const actionArgs = {
                                      tplRef: "registerProvider",
                                      action: "triggerRegister"
                                    };
                                    return (({ tplRef, action, args }) => {
                                      return $refs?.[tplRef]?.[action]?.(
                                        ...(args ?? [])
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["runActionOnRegisterProvider"] != null &&
                              typeof $steps["runActionOnRegisterProvider"] ===
                                "object" &&
                              typeof $steps["runActionOnRegisterProvider"]
                                .then === "function"
                            ) {
                              $steps["runActionOnRegisterProvider"] =
                                await $steps["runActionOnRegisterProvider"];
                            }

                            $steps["updateIsRegistered"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["isRegistered"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateIsRegistered"] != null &&
                              typeof $steps["updateIsRegistered"] ===
                                "object" &&
                              typeof $steps["updateIsRegistered"].then ===
                                "function"
                            ) {
                              $steps["updateIsRegistered"] = await $steps[
                                "updateIsRegistered"
                              ];
                            }
                          },
                          onIsSubmittingChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["form3", "isSubmitting"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          ref: ref => {
                            $refs["form3"] = ref;
                          },
                          requiredMark: true,
                          submitSlot: null,
                          validateTrigger: ["onSubmit"],
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "form3.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "form3.isSubmitting"
                            }
                          ],
                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <FormWrapper
                            data-plasmic-name={"form3"}
                            data-plasmic-override={overrides.form3}
                            {...child$Props}
                          >
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3___2B0Wf
                              )}
                            >
                              {"Registrace provozovatele"}
                            </h3>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___028K1
                              )}
                              style={(() => {
                                try {
                                  return (() => {
                                    {
                                      textColor: "white";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__ntlb
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__omCzF
                                    )}
                                  >
                                    {"N\u00e1zev firmy"}
                                  </div>
                                }
                                name={"name"}
                                preserve={false}
                                rules={[{ ruleType: "required" }]}
                              >
                                <TextInput
                                  data-plasmic-name={"textInput"}
                                  data-plasmic-override={overrides.textInput}
                                  aria-label={"providerName"}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.textInput
                                  )}
                                  onChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput",
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  type={"text"}
                                  value={
                                    generateStateValueProp($state, [
                                      "textInput",
                                      "value"
                                    ]) ?? ""
                                  }
                                />
                              </FormItemWrapper>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__of0Fe
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__rsQrm
                                    )}
                                  >
                                    {"Kontaktn\u00ed email"}
                                  </div>
                                }
                                name={"email"}
                                preserve={false}
                                rules={[{ ruleType: "required" }]}
                              >
                                <TextInput
                                  data-plasmic-name={"textInput2"}
                                  data-plasmic-override={overrides.textInput2}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.textInput2
                                  )}
                                  onChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput2",
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  type={"email"}
                                  value={
                                    generateStateValueProp($state, [
                                      "textInput2",
                                      "value"
                                    ]) ?? ""
                                  }
                                />
                              </FormItemWrapper>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__hqOk
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__foNq5
                                    )}
                                  >
                                    {"Adresa"}
                                  </div>
                                }
                                name={"adress"}
                                preserve={false}
                                rules={[{ ruleType: "required" }]}
                              >
                                <TextInput
                                  data-plasmic-name={"textInput3"}
                                  data-plasmic-override={overrides.textInput3}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.textInput3
                                  )}
                                  onChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput3",
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  type={"text"}
                                  value={
                                    generateStateValueProp($state, [
                                      "textInput3",
                                      "value"
                                    ]) ?? ""
                                  }
                                />
                              </FormItemWrapper>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__nMsr8
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__xA8N7
                                    )}
                                  >
                                    {"Kontaktn\u00ed telefon"}
                                  </div>
                                }
                                name={"phone"}
                                preserve={false}
                                rules={[{ ruleType: "required" }]}
                              >
                                <TextInput
                                  data-plasmic-name={"textInput4"}
                                  data-plasmic-override={overrides.textInput4}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.textInput4
                                  )}
                                  onChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput4",
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  type={"tel"}
                                  value={
                                    generateStateValueProp($state, [
                                      "textInput4",
                                      "value"
                                    ]) ?? ""
                                  }
                                />
                              </FormItemWrapper>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__sdMjO
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ppb4X
                                    )}
                                  >
                                    {"  I\u010cO (voliteln\u00e9)"}
                                  </div>
                                }
                                name={"providerID"}
                                preserve={false}
                              >
                                <TextInput
                                  data-plasmic-name={"textInput5"}
                                  data-plasmic-override={overrides.textInput5}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.textInput5
                                  )}
                                  onChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput5",
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  type={"number"}
                                  value={
                                    generateStateValueProp($state, [
                                      "textInput5",
                                      "value"
                                    ]) ?? ""
                                  }
                                />
                              </FormItemWrapper>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__wvpbn
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__mQi7U
                                    )}
                                  >
                                    {"Kontaktn\u00ed osoba"}
                                  </div>
                                }
                                name={"supervisor"}
                                preserve={false}
                                rules={[{ ruleType: "required" }]}
                              >
                                <TextInput
                                  data-plasmic-name={"textInput6"}
                                  data-plasmic-override={overrides.textInput6}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.textInput6
                                  )}
                                  onChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput6",
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  type={"text"}
                                  value={
                                    generateStateValueProp($state, [
                                      "textInput6",
                                      "value"
                                    ]) ?? ""
                                  }
                                />
                              </FormItemWrapper>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__aywsq
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__sHnLf
                                    )}
                                  >
                                    {"Heslo"}
                                  </div>
                                }
                                name={"password"}
                                preserve={false}
                                rules={[{ ruleType: "required" }]}
                              >
                                <TextInput
                                  data-plasmic-name={"textInput7"}
                                  data-plasmic-override={overrides.textInput7}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.textInput7
                                  )}
                                  onChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput7",
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  type={"password"}
                                  value={
                                    generateStateValueProp($state, [
                                      "textInput7",
                                      "value"
                                    ]) ?? ""
                                  }
                                />
                              </FormItemWrapper>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__vLqOm
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__kmIlU
                                    )}
                                  >
                                    {"Heslo znovu"}
                                  </div>
                                }
                                name={"passCheck"}
                                preserve={false}
                                rules={[
                                  {
                                    ruleType: "required",
                                    message: (() => {
                                      try {
                                        return "";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  },

                                  {
                                    ruleType: "advanced",
                                    options: (() => {
                                      const __composite = [{ value: null }];
                                      __composite["0"]["value"] = undefined;
                                      return __composite;
                                    })(),
                                    custom: (rule, value) => {
                                      return (
                                        $state.form3.value.password ===
                                        $state.form3.value.passCheck
                                      );
                                    },
                                    message: "Hesla se neshoduj\u00ed"
                                  }
                                ]}
                                validateTrigger={["onSubmit"]}
                              >
                                <TextInput
                                  data-plasmic-name={"textInput8"}
                                  data-plasmic-override={overrides.textInput8}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.textInput8
                                  )}
                                  onChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput8",
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  type={"password"}
                                  value={
                                    generateStateValueProp($state, [
                                      "textInput8",
                                      "value"
                                    ]) ?? ""
                                  }
                                />
                              </FormItemWrapper>
                            </div>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField___9N2Pj
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___2Kce
                                  )}
                                >
                                  {"Popis firmy"}
                                </div>
                              }
                              name={"info"}
                              noStyle={false}
                              preserve={false}
                            >
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__ei5K3
                                )}
                                label={null}
                                noStyle={true}
                                preserve={false}
                              >
                                {(() => {
                                  const child$Props = {
                                    autoSize: true,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.textArea
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["textArea", "value"],
                                        AntdTextArea_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    value: generateStateValueProp($state, [
                                      "textArea",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "textArea.value"
                                      }
                                    ],
                                    [],
                                    AntdTextArea_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdTextArea
                                      data-plasmic-name={"textArea"}
                                      data-plasmic-override={overrides.textArea}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            </FormItemWrapper>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__iA9Ct
                              )}
                            >
                              {
                                "* kontaktn\u00ed \u00fadaje slou\u017e\u00ed k ov\u011b\u0159en\u00ed pravosti poskytovatele"
                              }
                            </div>
                            <AntdButton
                              data-plasmic-name={"loginButton3"}
                              data-plasmic-override={overrides.loginButton3}
                              className={classNames(
                                "__wab_instance",
                                sty.loginButton3
                              )}
                              loading={(() => {
                                try {
                                  return $state.form3.isSubmitting;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                              submitsForm={true}
                              type={"default"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__tyq9E
                                )}
                              >
                                {"Zaregistrovat provozovatele"}
                              </div>
                            </AntdButton>
                          </FormWrapper>
                        );
                      })()}
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wDyC
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__q7ZnQ
                          )}
                        >
                          {"Zp\u011bt na "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vrvwz
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToLogin"] = true
                              ? (() => {
                                  const actionArgs = { destination: `/login` };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToLogin"] != null &&
                              typeof $steps["goToLogin"] === "object" &&
                              typeof $steps["goToLogin"].then === "function"
                            ) {
                              $steps["goToLogin"] = await $steps["goToLogin"];
                            }
                          }}
                        >
                          {"Login"}
                        </div>
                      </div>
                      <AntdButton
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateIsRegistered"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["isRegistered"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateIsRegistered"] != null &&
                            typeof $steps["updateIsRegistered"] === "object" &&
                            typeof $steps["updateIsRegistered"].then ===
                              "function"
                          ) {
                            $steps["updateIsRegistered"] = await $steps[
                              "updateIsRegistered"
                            ];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__m4Dzh
                          )}
                        >
                          {"Button"}
                        </div>
                      </AntdButton>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.isRegistered;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___36Qyt
                      )}
                      style={(() => {
                        try {
                          return {
                            visibility: $state.isRegistered
                              ? "visible"
                              : "hidden",
                            opacity: $state.isRegistered ? 1 : 0,
                            animation: $state.isRegistered
                              ? "fadeIn 200ms ease-in-out"
                              : "none",
                            transition: "opacity 200ms ease-in-out" // Smooth transition for opacity changes
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__f1OfL
                        )}
                      >
                        {
                          "Registrace je \u00fasp\u011b\u0161n\u011b hotov\u00e1!"
                        }
                      </h3>
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__j3UJ
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 500 }}
                          >
                            {"Nyn\u00ed "}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 400 }}
                          >
                            {"bude pot\u0159eba"}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 500 }}
                          >
                            {" "}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 800 }}
                          >
                            {"ov\u011b\u0159it V\u00e1\u0161 \u00fa\u010det"}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 400 }}
                          >
                            {"."}
                          </span>
                        </React.Fragment>
                      </h3>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ygFlV
                        )}
                        style={(() => {
                          try {
                            return {
                              gap: "2vh"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gioto
                          )}
                        >
                          {
                            "Na uvedenou e-mailovou adresu jsem odeslali aktiva\u010dn\u00ed odkaz."
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__r2S7Q
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{"Po "}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"ov\u011b\u0159en\u00ed \u00fa\u010dtu"}
                            </span>
                            <React.Fragment>
                              {
                                " budete ji\u017e moci spravovat sv\u016fj \u00fa\u010det a p\u0159ipravovat sv\u00e9 aktivity."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___405D
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>
                              {"\nV n\u00e1sleduj\u00edc\u00edch "}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"pracovn\u00edch dnech"}
                            </span>
                            <React.Fragment>
                              {
                                " V\u00e1s budeme kontaktovat a ov\u011b\u0159\u00edme si, \u017ee jste to sku\u0159e\u010dn\u011b Vy!\nN\u00e1sledn\u011b budete moci vyu\u017e\u00edvat V\u00e1\u0161 \u00fa\u010det naplno."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        </div>
                      </div>
                    </div>
                  ) : null}
                </div>
              </div>
            </main>
          </section>
          <RegisterProvider
            data-plasmic-name={"registerProvider"}
            data-plasmic-override={overrides.registerProvider}
            address={"123 Provider St."}
            className={classNames("__wab_instance", sty.registerProvider)}
            description={(() => {
              try {
                return $state.form3.value.info;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "A description of the provider";
                }
                throw e;
              }
            })()}
            email={(() => {
              try {
                return $state.form3.value.email;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "provider@example.com";
                }
                throw e;
              }
            })()}
            ico={(() => {
              try {
                return $state.form3.value.providerID;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return 12345678;
                }
                throw e;
              }
            })()}
            password={(() => {
              try {
                return $state.form3.value.password;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "providerpassword123";
                }
                throw e;
              }
            })()}
            phone={(() => {
              try {
                return $state.form3.value.phone;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "+1234567890";
                }
                throw e;
              }
            })()}
            providerName={(() => {
              try {
                return $state.form3.value.name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Awesome Provider";
                }
                throw e;
              }
            })()}
            ref={ref => {
              $refs["registerProvider"] = ref;
            }}
            supervisorName={(() => {
              try {
                return $state.form3.value.supervisor;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Jane Doe";
                }
                throw e;
              }
            })()}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "header",
    "main",
    "left",
    "img",
    "right",
    "form3",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4",
    "textInput5",
    "textInput6",
    "textInput7",
    "textInput8",
    "textArea",
    "loginButton3",
    "button",
    "registerProvider"
  ],
  section: [
    "section",
    "header",
    "main",
    "left",
    "img",
    "right",
    "form3",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4",
    "textInput5",
    "textInput6",
    "textInput7",
    "textInput8",
    "textArea",
    "loginButton3",
    "button"
  ],
  header: ["header"],
  main: [
    "main",
    "left",
    "img",
    "right",
    "form3",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4",
    "textInput5",
    "textInput6",
    "textInput7",
    "textInput8",
    "textArea",
    "loginButton3",
    "button"
  ],
  left: ["left", "img"],
  img: ["img"],
  right: [
    "right",
    "form3",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4",
    "textInput5",
    "textInput6",
    "textInput7",
    "textInput8",
    "textArea",
    "loginButton3",
    "button"
  ],
  form3: [
    "form3",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4",
    "textInput5",
    "textInput6",
    "textInput7",
    "textInput8",
    "textArea",
    "loginButton3"
  ],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"],
  textInput4: ["textInput4"],
  textInput5: ["textInput5"],
  textInput6: ["textInput6"],
  textInput7: ["textInput7"],
  textInput8: ["textInput8"],
  textArea: ["textArea"],
  loginButton3: ["loginButton3"],
  button: ["button"],
  registerProvider: ["registerProvider"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  header: typeof Header;
  main: "main";
  left: "div";
  img: typeof PlasmicImg__;
  right: "div";
  form3: typeof FormWrapper;
  textInput: typeof TextInput;
  textInput2: typeof TextInput;
  textInput3: typeof TextInput;
  textInput4: typeof TextInput;
  textInput5: typeof TextInput;
  textInput6: typeof TextInput;
  textInput7: typeof TextInput;
  textInput8: typeof TextInput;
  textArea: typeof AntdTextArea;
  loginButton3: typeof AntdButton;
  button: typeof AntdButton;
  registerProvider: typeof RegisterProvider;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRegistrationProvider__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRegistrationProvider__VariantsArgs;
    args?: PlasmicRegistrationProvider__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRegistrationProvider__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRegistrationProvider__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRegistrationProvider__ArgProps,
          internalVariantPropNames: PlasmicRegistrationProvider__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRegistrationProvider__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRegistrationProvider";
  } else {
    func.displayName = `PlasmicRegistrationProvider.${nodeName}`;
  }
  return func;
}

export const PlasmicRegistrationProvider = Object.assign(
  // Top-level PlasmicRegistrationProvider renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    header: makeNodeComponent("header"),
    main: makeNodeComponent("main"),
    left: makeNodeComponent("left"),
    img: makeNodeComponent("img"),
    right: makeNodeComponent("right"),
    form3: makeNodeComponent("form3"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),
    textInput4: makeNodeComponent("textInput4"),
    textInput5: makeNodeComponent("textInput5"),
    textInput6: makeNodeComponent("textInput6"),
    textInput7: makeNodeComponent("textInput7"),
    textInput8: makeNodeComponent("textInput8"),
    textArea: makeNodeComponent("textArea"),
    loginButton3: makeNodeComponent("loginButton3"),
    button: makeNodeComponent("button"),
    registerProvider: makeNodeComponent("registerProvider"),

    // Metadata about props expected for PlasmicRegistrationProvider
    internalVariantProps: PlasmicRegistrationProvider__VariantProps,
    internalArgProps: PlasmicRegistrationProvider__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRegistrationProvider;
/* prettier-ignore-end */
