// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7YxWRrh3dN23tQ7PqjX2hp
// Component: QQmpzqRW7UA6

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7YxWRrh3dN23tQ7PqjX2hp/projectcss
import sty from "./PlasmicSubCategoryItem.module.css"; // plasmic-import: QQmpzqRW7UA6/css

createPlasmicElementProxy;

export type PlasmicSubCategoryItem__VariantMembers = {};
export type PlasmicSubCategoryItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicSubCategoryItem__VariantsArgs;
export const PlasmicSubCategoryItem__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSubCategoryItem__ArgsType = {
  color?: string;
  selected?: boolean;
  subCategoryItemData?: any;
};
type ArgPropType = keyof PlasmicSubCategoryItem__ArgsType;
export const PlasmicSubCategoryItem__ArgProps = new Array<ArgPropType>(
  "color",
  "selected",
  "subCategoryItemData"
);

export type PlasmicSubCategoryItem__OverridesType = {
  root?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  section?: Flex__<"section">;
  img?: Flex__<typeof PlasmicImg__>;
  freeBox?: Flex__<"div">;
  h3?: Flex__<"h3">;
};

export interface DefaultSubCategoryItemProps {
  color?: string;
  selected?: boolean;
  subCategoryItemData?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSubCategoryItem__RenderFunc(props: {
  variants: PlasmicSubCategoryItem__VariantsArgs;
  args: PlasmicSubCategoryItem__ArgsType;
  overrides: PlasmicSubCategoryItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          selected: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <PlasmicLink__
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(projectcss.all, projectcss.a, sty.link)}
        component={Link}
        platform={"nextjs"}
      >
        <section
          data-plasmic-name={"section"}
          data-plasmic-override={overrides.section}
          className={classNames(projectcss.all, sty.section)}
          style={(() => {
            try {
              return {
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                height: "100%", // Adjust this to the height of your container if needed
                width: "100%" // Adjust this to the width of your container if needed
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"100%"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={(() => {
              try {
                return $props.subCategoryItemData.image;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
            style={
              triggers.hover_root
                ? (() => {
                    try {
                      return {
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                        height: "100%", // Adjust this to the height of your container if needed
                        width: "100%", // Adjust this to the width of your container if needed
                        background: `linear-gradient(to right, ${$props.color}73 0%, ${$props.color} 50%, ${$props.color}73 100%)`
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return {
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                        height: "100%", // Adjust this to the height of your container if needed
                        width: "100%", // Adjust this to the width of your container if needed
                        background:
                          $props.selected === true
                            ? `linear-gradient(to right, ${$props.color}73 0%, ${$props.color} 50%, ${$props.color}73 100%)`
                            : `linear-gradient(to right, #ffffff73 0%, #ffffff 50%, #ffffff73 100%)`
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
            }
          >
            <h3
              data-plasmic-name={"h3"}
              data-plasmic-override={overrides.h3}
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3
              )}
              style={
                triggers.hover_root
                  ? (() => {
                      try {
                        return {
                          color: "#ffffff"
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return {
                          color:
                            $props.selected === true ? "#ffffff" : $props.color
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
              }
            >
              <React.Fragment>{$props.subCategoryItemData.name}</React.Fragment>
            </h3>
          </div>
        </section>
      </PlasmicLink__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "section", "img", "freeBox", "h3"],
  link: ["link", "section", "img", "freeBox", "h3"],
  section: ["section", "img", "freeBox", "h3"],
  img: ["img"],
  freeBox: ["freeBox", "h3"],
  h3: ["h3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  section: "section";
  img: typeof PlasmicImg__;
  freeBox: "div";
  h3: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSubCategoryItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSubCategoryItem__VariantsArgs;
    args?: PlasmicSubCategoryItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSubCategoryItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSubCategoryItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSubCategoryItem__ArgProps,
          internalVariantPropNames: PlasmicSubCategoryItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSubCategoryItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSubCategoryItem";
  } else {
    func.displayName = `PlasmicSubCategoryItem.${nodeName}`;
  }
  return func;
}

export const PlasmicSubCategoryItem = Object.assign(
  // Top-level PlasmicSubCategoryItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    section: makeNodeComponent("section"),
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    h3: makeNodeComponent("h3"),

    // Metadata about props expected for PlasmicSubCategoryItem
    internalVariantProps: PlasmicSubCategoryItem__VariantProps,
    internalArgProps: PlasmicSubCategoryItem__ArgProps
  }
);

export default PlasmicSubCategoryItem;
/* prettier-ignore-end */
