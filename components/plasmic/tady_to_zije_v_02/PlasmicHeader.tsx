// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7YxWRrh3dN23tQ7PqjX2hp
// Component: uZX7p1wyVbCa

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { Logout } from "@components/Logout"; // plasmic-import: bOstTOy5OKvR/codeComponent
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7YxWRrh3dN23tQ7PqjX2hp/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: uZX7p1wyVbCa/css

createPlasmicElementProxy;

export type PlasmicHeader__VariantMembers = {};
export type PlasmicHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>();

export type PlasmicHeader__ArgsType = {};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicHeader__OverridesType = {
  header?: Flex__<"header">;
  framepost?: Flex__<"div">;
  web?: Flex__<"h2">;
  web2?: Flex__<"h2">;
  web3?: Flex__<"h2">;
  web4?: Flex__<"h2">;
  web5?: Flex__<"h2">;
  h6?: Flex__<"h6">;
  dropdown?: Flex__<typeof AntdDropdown>;
  button?: Flex__<typeof AntdButton>;
  logout?: Flex__<typeof Logout>;
};

export interface DefaultHeaderProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <header
      data-plasmic-name={"header"}
      data-plasmic-override={overrides.header}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.header
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__vZcwX)}
        style={(() => {
          try {
            return {
              gap: "0.5vw"
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <div
          data-plasmic-name={"framepost"}
          data-plasmic-override={overrides.framepost}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.framepost
          )}
          onClick={async event => {
            const $steps = {};

            $steps["goToHomepage"] = true
              ? (() => {
                  const actionArgs = { destination: `/` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToHomepage"] != null &&
              typeof $steps["goToHomepage"] === "object" &&
              typeof $steps["goToHomepage"].then === "function"
            ) {
              $steps["goToHomepage"] = await $steps["goToHomepage"];
            }
          }}
          style={(() => {
            try {
              return {
                width: "calc(100%/6)"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          {"Logo - n\u00e1zev"}
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__xwkod)}
          style={(() => {
            try {
              return {
                gap: "3vw",
                width: "calc(100%/6*4)"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          {false ? (
            <h2
              data-plasmic-name={"web"}
              data-plasmic-override={overrides.web}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.web
              )}
            >
              {"vyhled\u00e1v\u00e1\u010d aktivit"}
            </h2>
          ) : null}
          <h2
            data-plasmic-name={"web2"}
            data-plasmic-override={overrides.web2}
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.web2
            )}
          >
            {"dal\u0161\u00ed informace"}
          </h2>
          <h2
            data-plasmic-name={"web3"}
            data-plasmic-override={overrides.web3}
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.web3
            )}
          >
            {"blog"}
          </h2>
          <h2
            data-plasmic-name={"web4"}
            data-plasmic-override={overrides.web4}
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.web4
            )}
          >
            {"kontakty"}
          </h2>
          <h2
            data-plasmic-name={"web5"}
            data-plasmic-override={overrides.web5}
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.web5
            )}
            onClick={async event => {
              const $steps = {};

              $steps["goToRegistration2"] = true
                ? (() => {
                    const actionArgs = {
                      destination: `/registrace-provozovatel`
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToRegistration2"] != null &&
                typeof $steps["goToRegistration2"] === "object" &&
                typeof $steps["goToRegistration2"].then === "function"
              ) {
                $steps["goToRegistration2"] = await $steps["goToRegistration2"];
              }
            }}
          >
            {"registrace firmy"}
          </h2>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__vfQny)}
          style={(() => {
            try {
              return {
                width: "calc(100%/6/2)"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          {(() => {
            try {
              return $ctx.userData.isLogged === true ? true : false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <h6
              data-plasmic-name={"h6"}
              data-plasmic-override={overrides.h6}
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      $ctx.userData.providerName || $ctx.userData.firstName
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </h6>
          ) : null}
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__uwh1Q)}
          style={(() => {
            try {
              return {
                width: "calc(100%/6/2)"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <AntdDropdown
            data-plasmic-name={"dropdown"}
            data-plasmic-override={overrides.dropdown}
            className={classNames("__wab_instance", sty.dropdown)}
            disabled={false}
            dropdownMenuScopeClassName={sty["dropdown__dropdownMenu"]}
            fakeOpen={false}
            menuItems={() => (
              <React.Fragment>
                <AntdMenuItem
                  className={classNames("__wab_instance", sty.menuItem__tlNb9)}
                  key={"menu-item-1"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tnKyn
                    )}
                  >
                    {"Menu item"}
                  </div>
                </AntdMenuItem>
                <AntdMenuItem
                  className={classNames("__wab_instance", sty.menuItem__nGBb)}
                  key={"menu-item-2"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eupk2
                    )}
                  >
                    {"Menu item"}
                  </div>
                </AntdMenuItem>
              </React.Fragment>
            )}
            menuItemsJson={(() => {
              const __composite = [
                { type: null, value: "action1", label: null, onClick: null },
                { type: "item", value: "action2", label: null, onClick: null },
                { type: "item", label: null, onClick: null },
                { type: null, label: null, onClick: null },
                { type: null },
                { type: "item", label: null, onClick: null }
              ];
              __composite["0"]["type"] = "item";
              __composite["0"]["label"] = "Aktivity";
              __composite["0"]["onClick"] = async info => {
                const $steps = {};

                $steps["goToDashboardProvider"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/provozovatel/${"activity"}`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToDashboardProvider"] != null &&
                  typeof $steps["goToDashboardProvider"] === "object" &&
                  typeof $steps["goToDashboardProvider"].then === "function"
                ) {
                  $steps["goToDashboardProvider"] = await $steps[
                    "goToDashboardProvider"
                  ];
                }
              };
              __composite["1"]["label"] = "Spr\u00e1va profilu";
              __composite["1"]["onClick"] = async info => {
                const $steps = {};

                $steps["goToDashboardProvider"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/provozovatel/${"profile"}`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToDashboardProvider"] != null &&
                  typeof $steps["goToDashboardProvider"] === "object" &&
                  typeof $steps["goToDashboardProvider"].then === "function"
                ) {
                  $steps["goToDashboardProvider"] = await $steps[
                    "goToDashboardProvider"
                  ];
                }
              };
              __composite["2"]["label"] = "Nastaven\u00ed plateb";
              __composite["2"]["onClick"] = async info => {
                const $steps = {};

                $steps["goToDashboardProvider"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/provozovatel/${"payment"}`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToDashboardProvider"] != null &&
                  typeof $steps["goToDashboardProvider"] === "object" &&
                  typeof $steps["goToDashboardProvider"].then === "function"
                ) {
                  $steps["goToDashboardProvider"] = await $steps[
                    "goToDashboardProvider"
                  ];
                }
              };
              __composite["3"]["type"] = "item";
              __composite["3"]["label"] = "Nastaven\u00ed \u00fa\u010dtu";
              __composite["3"]["onClick"] = async info => {
                const $steps = {};

                $steps["goToDashboardProvider"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/provozovatel/${"account"}`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToDashboardProvider"] != null &&
                  typeof $steps["goToDashboardProvider"] === "object" &&
                  typeof $steps["goToDashboardProvider"].then === "function"
                ) {
                  $steps["goToDashboardProvider"] = await $steps[
                    "goToDashboardProvider"
                  ];
                }
              };
              __composite["4"]["type"] = "divider";
              __composite["5"]["label"] = "Odhl\u00e1sit";
              __composite["5"]["onClick"] = async info => {
                const $steps = {};

                $steps["runActionOnLogout"] = true
                  ? (() => {
                      const actionArgs = {
                        tplRef: "logout",
                        action: "triggerLogout"
                      };
                      return (({ tplRef, action, args }) => {
                        return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runActionOnLogout"] != null &&
                  typeof $steps["runActionOnLogout"] === "object" &&
                  typeof $steps["runActionOnLogout"].then === "function"
                ) {
                  $steps["runActionOnLogout"] = await $steps[
                    "runActionOnLogout"
                  ];
                }

                $steps["goToHomepage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHomepage"] != null &&
                  typeof $steps["goToHomepage"] === "object" &&
                  typeof $steps["goToHomepage"].then === "function"
                ) {
                  $steps["goToHomepage"] = await $steps["goToHomepage"];
                }
              };
              return __composite;
            })()}
            trigger={(() => {
              try {
                return $ctx.userData && $ctx.userData.isLogged
                  ? "hover"
                  : false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "hover";
                }
                throw e;
              }
            })()}
          >
            <AntdButton
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              disabled={undefined}
              onClick={async () => {
                const $steps = {};

                $steps["goToLogin"] =
                  !$ctx.userData || !$ctx.userData.isLogged
                    ? (() => {
                        const actionArgs = { destination: `/login` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["goToLogin"] != null &&
                  typeof $steps["goToLogin"] === "object" &&
                  typeof $steps["goToLogin"].then === "function"
                ) {
                  $steps["goToLogin"] = await $steps["goToLogin"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7XUsD
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.visitorData.isLogged === true
                        ? "Můj účet"
                        : "Přihlásit se";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "P\u0159ihl\u00e1sit";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </AntdButton>
          </AntdDropdown>
        </div>
      </div>
      <Logout
        data-plasmic-name={"logout"}
        data-plasmic-override={overrides.logout}
        className={classNames("__wab_instance", sty.logout)}
        ref={ref => {
          $refs["logout"] = ref;
        }}
      />
    </header>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  header: [
    "header",
    "framepost",
    "web",
    "web2",
    "web3",
    "web4",
    "web5",
    "h6",
    "dropdown",
    "button",
    "logout"
  ],
  framepost: ["framepost"],
  web: ["web"],
  web2: ["web2"],
  web3: ["web3"],
  web4: ["web4"],
  web5: ["web5"],
  h6: ["h6"],
  dropdown: ["dropdown", "button"],
  button: ["button"],
  logout: ["logout"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  header: "header";
  framepost: "div";
  web: "h2";
  web2: "h2";
  web3: "h2";
  web4: "h2";
  web5: "h2";
  h6: "h6";
  dropdown: typeof AntdDropdown;
  button: typeof AntdButton;
  logout: typeof Logout;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeader__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "header") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("header"),
  {
    // Helper components rendering sub-elements
    framepost: makeNodeComponent("framepost"),
    web: makeNodeComponent("web"),
    web2: makeNodeComponent("web2"),
    web3: makeNodeComponent("web3"),
    web4: makeNodeComponent("web4"),
    web5: makeNodeComponent("web5"),
    h6: makeNodeComponent("h6"),
    dropdown: makeNodeComponent("dropdown"),
    button: makeNodeComponent("button"),
    logout: makeNodeComponent("logout"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
